// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bazel-out/local-fastbuild/bin/src/main/protobuf/libxcodegen_java_proto_srcjar.srcjar.preprocessed/xcodegen.proto

package com.google.devtools.build.xcode.xcodegen.proto;

public final class XcodeGenProtos {
  private XcodeGenProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:build.xcode.Control)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Relative path to the project.pbxproj file. This value is used to construct
     * relative paths in the xcodeproj file, as well as to specify where to write
     * the resulting project file.
     * </pre>
     *
     * <code>optional string pbxproj = 1;</code>
     */
    boolean hasPbxproj();
    /**
     * <pre>
     * Relative path to the project.pbxproj file. This value is used to construct
     * relative paths in the xcodeproj file, as well as to specify where to write
     * the resulting project file.
     * </pre>
     *
     * <code>optional string pbxproj = 1;</code>
     */
    java.lang.String getPbxproj();
    /**
     * <pre>
     * Relative path to the project.pbxproj file. This value is used to construct
     * relative paths in the xcodeproj file, as well as to specify where to write
     * the resulting project file.
     * </pre>
     *
     * <code>optional string pbxproj = 1;</code>
     */
    com.google.protobuf.ByteString
        getPbxprojBytes();

    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl> 
        getTargetList();
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl getTarget(int index);
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    int getTargetCount();
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder> 
        getTargetOrBuilderList();
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder getTargetOrBuilder(
        int index);

    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> 
        getBuildSettingList();
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getBuildSetting(int index);
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    int getBuildSettingCount();
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
        getBuildSettingOrBuilderList();
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder getBuildSettingOrBuilder(
        int index);

    /**
     * <pre>
     * Absolute path to the root of the current Bazel user workspace.
     * </pre>
     *
     * <code>optional string workspace_root = 4;</code>
     */
    boolean hasWorkspaceRoot();
    /**
     * <pre>
     * Absolute path to the root of the current Bazel user workspace.
     * </pre>
     *
     * <code>optional string workspace_root = 4;</code>
     */
    java.lang.String getWorkspaceRoot();
    /**
     * <pre>
     * Absolute path to the root of the current Bazel user workspace.
     * </pre>
     *
     * <code>optional string workspace_root = 4;</code>
     */
    com.google.protobuf.ByteString
        getWorkspaceRootBytes();

    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    java.util.List<java.lang.String>
        getCpuArchitectureList();
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    int getCpuArchitectureCount();
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    java.lang.String getCpuArchitecture(int index);
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    com.google.protobuf.ByteString
        getCpuArchitectureBytes(int index);
  }
  /**
   * <pre>
   * Contains all information needed to pass to Xcodegen for it to generate a
   * project file.
   * </pre>
   *
   * Protobuf type {@code build.xcode.Control}
   */
  public  static final class Control extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:build.xcode.Control)
      ControlOrBuilder {
    // Use Control.newBuilder() to construct.
    private Control(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Control() {
      pbxproj_ = "";
      target_ = java.util.Collections.emptyList();
      buildSetting_ = java.util.Collections.emptyList();
      workspaceRoot_ = "";
      cpuArchitecture_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Control(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              pbxproj_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                target_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl>();
                mutable_bitField0_ |= 0x00000002;
              }
              target_.add(
                  input.readMessage(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                buildSetting_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting>();
                mutable_bitField0_ |= 0x00000004;
              }
              buildSetting_.add(
                  input.readMessage(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              workspaceRoot_ = bs;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cpuArchitecture_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              cpuArchitecture_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          target_ = java.util.Collections.unmodifiableList(target_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          buildSetting_ = java.util.Collections.unmodifiableList(buildSetting_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cpuArchitecture_ = cpuArchitecture_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_Control_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_Control_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.Builder.class);
    }

    private int bitField0_;
    public static final int PBXPROJ_FIELD_NUMBER = 1;
    private volatile java.lang.Object pbxproj_;
    /**
     * <pre>
     * Relative path to the project.pbxproj file. This value is used to construct
     * relative paths in the xcodeproj file, as well as to specify where to write
     * the resulting project file.
     * </pre>
     *
     * <code>optional string pbxproj = 1;</code>
     */
    public boolean hasPbxproj() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Relative path to the project.pbxproj file. This value is used to construct
     * relative paths in the xcodeproj file, as well as to specify where to write
     * the resulting project file.
     * </pre>
     *
     * <code>optional string pbxproj = 1;</code>
     */
    public java.lang.String getPbxproj() {
      java.lang.Object ref = pbxproj_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          pbxproj_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Relative path to the project.pbxproj file. This value is used to construct
     * relative paths in the xcodeproj file, as well as to specify where to write
     * the resulting project file.
     * </pre>
     *
     * <code>optional string pbxproj = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPbxprojBytes() {
      java.lang.Object ref = pbxproj_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pbxproj_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TARGET_FIELD_NUMBER = 2;
    private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl> target_;
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl> getTargetList() {
      return target_;
    }
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder> 
        getTargetOrBuilderList() {
      return target_;
    }
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    public int getTargetCount() {
      return target_.size();
    }
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl getTarget(int index) {
      return target_.get(index);
    }
    /**
     * <pre>
     * The targets to generate.
     * </pre>
     *
     * <code>repeated .build.xcode.TargetControl target = 2;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder getTargetOrBuilder(
        int index) {
      return target_.get(index);
    }

    public static final int BUILD_SETTING_FIELD_NUMBER = 3;
    private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> buildSetting_;
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> getBuildSettingList() {
      return buildSetting_;
    }
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
        getBuildSettingOrBuilderList() {
      return buildSetting_;
    }
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    public int getBuildSettingCount() {
      return buildSetting_.size();
    }
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getBuildSetting(int index) {
      return buildSetting_.get(index);
    }
    /**
     * <pre>
     * Project-level build settings. These are shared with every target, unless
     * an individual target overrides any of them.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder getBuildSettingOrBuilder(
        int index) {
      return buildSetting_.get(index);
    }

    public static final int WORKSPACE_ROOT_FIELD_NUMBER = 4;
    private volatile java.lang.Object workspaceRoot_;
    /**
     * <pre>
     * Absolute path to the root of the current Bazel user workspace.
     * </pre>
     *
     * <code>optional string workspace_root = 4;</code>
     */
    public boolean hasWorkspaceRoot() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Absolute path to the root of the current Bazel user workspace.
     * </pre>
     *
     * <code>optional string workspace_root = 4;</code>
     */
    public java.lang.String getWorkspaceRoot() {
      java.lang.Object ref = workspaceRoot_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          workspaceRoot_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Absolute path to the root of the current Bazel user workspace.
     * </pre>
     *
     * <code>optional string workspace_root = 4;</code>
     */
    public com.google.protobuf.ByteString
        getWorkspaceRootBytes() {
      java.lang.Object ref = workspaceRoot_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        workspaceRoot_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CPU_ARCHITECTURE_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList cpuArchitecture_;
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCpuArchitectureList() {
      return cpuArchitecture_;
    }
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    public int getCpuArchitectureCount() {
      return cpuArchitecture_.size();
    }
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    public java.lang.String getCpuArchitecture(int index) {
      return cpuArchitecture_.get(index);
    }
    /**
     * <pre>
     * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
     * targets in the project.pbxproj file.
     * </pre>
     *
     * <code>repeated string cpu_architecture = 5;</code>
     */
    public com.google.protobuf.ByteString
        getCpuArchitectureBytes(int index) {
      return cpuArchitecture_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, pbxproj_);
      }
      for (int i = 0; i < target_.size(); i++) {
        output.writeMessage(2, target_.get(i));
      }
      for (int i = 0; i < buildSetting_.size(); i++) {
        output.writeMessage(3, buildSetting_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, workspaceRoot_);
      }
      for (int i = 0; i < cpuArchitecture_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, cpuArchitecture_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, pbxproj_);
      }
      for (int i = 0; i < target_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, target_.get(i));
      }
      for (int i = 0; i < buildSetting_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, buildSetting_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, workspaceRoot_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cpuArchitecture_.size(); i++) {
          dataSize += computeStringSizeNoTag(cpuArchitecture_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCpuArchitectureList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control)) {
        return super.equals(obj);
      }
      com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control other = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control) obj;

      boolean result = true;
      result = result && (hasPbxproj() == other.hasPbxproj());
      if (hasPbxproj()) {
        result = result && getPbxproj()
            .equals(other.getPbxproj());
      }
      result = result && getTargetList()
          .equals(other.getTargetList());
      result = result && getBuildSettingList()
          .equals(other.getBuildSettingList());
      result = result && (hasWorkspaceRoot() == other.hasWorkspaceRoot());
      if (hasWorkspaceRoot()) {
        result = result && getWorkspaceRoot()
            .equals(other.getWorkspaceRoot());
      }
      result = result && getCpuArchitectureList()
          .equals(other.getCpuArchitectureList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasPbxproj()) {
        hash = (37 * hash) + PBXPROJ_FIELD_NUMBER;
        hash = (53 * hash) + getPbxproj().hashCode();
      }
      if (getTargetCount() > 0) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTargetList().hashCode();
      }
      if (getBuildSettingCount() > 0) {
        hash = (37 * hash) + BUILD_SETTING_FIELD_NUMBER;
        hash = (53 * hash) + getBuildSettingList().hashCode();
      }
      if (hasWorkspaceRoot()) {
        hash = (37 * hash) + WORKSPACE_ROOT_FIELD_NUMBER;
        hash = (53 * hash) + getWorkspaceRoot().hashCode();
      }
      if (getCpuArchitectureCount() > 0) {
        hash = (37 * hash) + CPU_ARCHITECTURE_FIELD_NUMBER;
        hash = (53 * hash) + getCpuArchitectureList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Contains all information needed to pass to Xcodegen for it to generate a
     * project file.
     * </pre>
     *
     * Protobuf type {@code build.xcode.Control}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:build.xcode.Control)
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.ControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_Control_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_Control_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.Builder.class);
      }

      // Construct using com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTargetFieldBuilder();
          getBuildSettingFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        pbxproj_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (targetBuilder_ == null) {
          target_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          targetBuilder_.clear();
        }
        if (buildSettingBuilder_ == null) {
          buildSetting_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          buildSettingBuilder_.clear();
        }
        workspaceRoot_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        cpuArchitecture_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_Control_descriptor;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control getDefaultInstanceForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.getDefaultInstance();
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control build() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control buildPartial() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control result = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pbxproj_ = pbxproj_;
        if (targetBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            target_ = java.util.Collections.unmodifiableList(target_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        if (buildSettingBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            buildSetting_ = java.util.Collections.unmodifiableList(buildSetting_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.buildSetting_ = buildSetting_;
        } else {
          result.buildSetting_ = buildSettingBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.workspaceRoot_ = workspaceRoot_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          cpuArchitecture_ = cpuArchitecture_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.cpuArchitecture_ = cpuArchitecture_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control) {
          return mergeFrom((com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control other) {
        if (other == com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control.getDefaultInstance()) return this;
        if (other.hasPbxproj()) {
          bitField0_ |= 0x00000001;
          pbxproj_ = other.pbxproj_;
          onChanged();
        }
        if (targetBuilder_ == null) {
          if (!other.target_.isEmpty()) {
            if (target_.isEmpty()) {
              target_ = other.target_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTargetIsMutable();
              target_.addAll(other.target_);
            }
            onChanged();
          }
        } else {
          if (!other.target_.isEmpty()) {
            if (targetBuilder_.isEmpty()) {
              targetBuilder_.dispose();
              targetBuilder_ = null;
              target_ = other.target_;
              bitField0_ = (bitField0_ & ~0x00000002);
              targetBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTargetFieldBuilder() : null;
            } else {
              targetBuilder_.addAllMessages(other.target_);
            }
          }
        }
        if (buildSettingBuilder_ == null) {
          if (!other.buildSetting_.isEmpty()) {
            if (buildSetting_.isEmpty()) {
              buildSetting_ = other.buildSetting_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureBuildSettingIsMutable();
              buildSetting_.addAll(other.buildSetting_);
            }
            onChanged();
          }
        } else {
          if (!other.buildSetting_.isEmpty()) {
            if (buildSettingBuilder_.isEmpty()) {
              buildSettingBuilder_.dispose();
              buildSettingBuilder_ = null;
              buildSetting_ = other.buildSetting_;
              bitField0_ = (bitField0_ & ~0x00000004);
              buildSettingBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBuildSettingFieldBuilder() : null;
            } else {
              buildSettingBuilder_.addAllMessages(other.buildSetting_);
            }
          }
        }
        if (other.hasWorkspaceRoot()) {
          bitField0_ |= 0x00000008;
          workspaceRoot_ = other.workspaceRoot_;
          onChanged();
        }
        if (!other.cpuArchitecture_.isEmpty()) {
          if (cpuArchitecture_.isEmpty()) {
            cpuArchitecture_ = other.cpuArchitecture_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureCpuArchitectureIsMutable();
            cpuArchitecture_.addAll(other.cpuArchitecture_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object pbxproj_ = "";
      /**
       * <pre>
       * Relative path to the project.pbxproj file. This value is used to construct
       * relative paths in the xcodeproj file, as well as to specify where to write
       * the resulting project file.
       * </pre>
       *
       * <code>optional string pbxproj = 1;</code>
       */
      public boolean hasPbxproj() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Relative path to the project.pbxproj file. This value is used to construct
       * relative paths in the xcodeproj file, as well as to specify where to write
       * the resulting project file.
       * </pre>
       *
       * <code>optional string pbxproj = 1;</code>
       */
      public java.lang.String getPbxproj() {
        java.lang.Object ref = pbxproj_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            pbxproj_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Relative path to the project.pbxproj file. This value is used to construct
       * relative paths in the xcodeproj file, as well as to specify where to write
       * the resulting project file.
       * </pre>
       *
       * <code>optional string pbxproj = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPbxprojBytes() {
        java.lang.Object ref = pbxproj_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pbxproj_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Relative path to the project.pbxproj file. This value is used to construct
       * relative paths in the xcodeproj file, as well as to specify where to write
       * the resulting project file.
       * </pre>
       *
       * <code>optional string pbxproj = 1;</code>
       */
      public Builder setPbxproj(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        pbxproj_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative path to the project.pbxproj file. This value is used to construct
       * relative paths in the xcodeproj file, as well as to specify where to write
       * the resulting project file.
       * </pre>
       *
       * <code>optional string pbxproj = 1;</code>
       */
      public Builder clearPbxproj() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pbxproj_ = getDefaultInstance().getPbxproj();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative path to the project.pbxproj file. This value is used to construct
       * relative paths in the xcodeproj file, as well as to specify where to write
       * the resulting project file.
       * </pre>
       *
       * <code>optional string pbxproj = 1;</code>
       */
      public Builder setPbxprojBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        pbxproj_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl> target_ =
        java.util.Collections.emptyList();
      private void ensureTargetIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          target_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl>(target_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder> targetBuilder_;

      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl> getTargetList() {
        if (targetBuilder_ == null) {
          return java.util.Collections.unmodifiableList(target_);
        } else {
          return targetBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public int getTargetCount() {
        if (targetBuilder_ == null) {
          return target_.size();
        } else {
          return targetBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl getTarget(int index) {
        if (targetBuilder_ == null) {
          return target_.get(index);
        } else {
          return targetBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder setTarget(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetIsMutable();
          target_.set(index, value);
          onChanged();
        } else {
          targetBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder setTarget(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder builderForValue) {
        if (targetBuilder_ == null) {
          ensureTargetIsMutable();
          target_.set(index, builderForValue.build());
          onChanged();
        } else {
          targetBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder addTarget(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetIsMutable();
          target_.add(value);
          onChanged();
        } else {
          targetBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder addTarget(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetIsMutable();
          target_.add(index, value);
          onChanged();
        } else {
          targetBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder addTarget(
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder builderForValue) {
        if (targetBuilder_ == null) {
          ensureTargetIsMutable();
          target_.add(builderForValue.build());
          onChanged();
        } else {
          targetBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder addTarget(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder builderForValue) {
        if (targetBuilder_ == null) {
          ensureTargetIsMutable();
          target_.add(index, builderForValue.build());
          onChanged();
        } else {
          targetBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder addAllTarget(
          java.lang.Iterable<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl> values) {
        if (targetBuilder_ == null) {
          ensureTargetIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, target_);
          onChanged();
        } else {
          targetBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          targetBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public Builder removeTarget(int index) {
        if (targetBuilder_ == null) {
          ensureTargetIsMutable();
          target_.remove(index);
          onChanged();
        } else {
          targetBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder getTargetBuilder(
          int index) {
        return getTargetFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder getTargetOrBuilder(
          int index) {
        if (targetBuilder_ == null) {
          return target_.get(index);  } else {
          return targetBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder> 
           getTargetOrBuilderList() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(target_);
        }
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder addTargetBuilder() {
        return getTargetFieldBuilder().addBuilder(
            com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.getDefaultInstance());
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder addTargetBuilder(
          int index) {
        return getTargetFieldBuilder().addBuilder(
            index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.getDefaultInstance());
      }
      /**
       * <pre>
       * The targets to generate.
       * </pre>
       *
       * <code>repeated .build.xcode.TargetControl target = 2;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder> 
           getTargetBuilderList() {
        return getTargetFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder>(
                  target_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> buildSetting_ =
        java.util.Collections.emptyList();
      private void ensureBuildSettingIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          buildSetting_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting>(buildSetting_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> buildSettingBuilder_;

      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> getBuildSettingList() {
        if (buildSettingBuilder_ == null) {
          return java.util.Collections.unmodifiableList(buildSetting_);
        } else {
          return buildSettingBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public int getBuildSettingCount() {
        if (buildSettingBuilder_ == null) {
          return buildSetting_.size();
        } else {
          return buildSettingBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getBuildSetting(int index) {
        if (buildSettingBuilder_ == null) {
          return buildSetting_.get(index);
        } else {
          return buildSettingBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder setBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting value) {
        if (buildSettingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuildSettingIsMutable();
          buildSetting_.set(index, value);
          onChanged();
        } else {
          buildSettingBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder setBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder builderForValue) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.set(index, builderForValue.build());
          onChanged();
        } else {
          buildSettingBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder addBuildSetting(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting value) {
        if (buildSettingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuildSettingIsMutable();
          buildSetting_.add(value);
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder addBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting value) {
        if (buildSettingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuildSettingIsMutable();
          buildSetting_.add(index, value);
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder addBuildSetting(
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder builderForValue) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.add(builderForValue.build());
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder addBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder builderForValue) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.add(index, builderForValue.build());
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder addAllBuildSetting(
          java.lang.Iterable<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> values) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, buildSetting_);
          onChanged();
        } else {
          buildSettingBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder clearBuildSetting() {
        if (buildSettingBuilder_ == null) {
          buildSetting_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          buildSettingBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public Builder removeBuildSetting(int index) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.remove(index);
          onChanged();
        } else {
          buildSettingBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder getBuildSettingBuilder(
          int index) {
        return getBuildSettingFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder getBuildSettingOrBuilder(
          int index) {
        if (buildSettingBuilder_ == null) {
          return buildSetting_.get(index);  } else {
          return buildSettingBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
           getBuildSettingOrBuilderList() {
        if (buildSettingBuilder_ != null) {
          return buildSettingBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(buildSetting_);
        }
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder addBuildSettingBuilder() {
        return getBuildSettingFieldBuilder().addBuilder(
            com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.getDefaultInstance());
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder addBuildSettingBuilder(
          int index) {
        return getBuildSettingFieldBuilder().addBuilder(
            index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.getDefaultInstance());
      }
      /**
       * <pre>
       * Project-level build settings. These are shared with every target, unless
       * an individual target overrides any of them.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 3;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder> 
           getBuildSettingBuilderList() {
        return getBuildSettingFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
          getBuildSettingFieldBuilder() {
        if (buildSettingBuilder_ == null) {
          buildSettingBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder>(
                  buildSetting_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          buildSetting_ = null;
        }
        return buildSettingBuilder_;
      }

      private java.lang.Object workspaceRoot_ = "";
      /**
       * <pre>
       * Absolute path to the root of the current Bazel user workspace.
       * </pre>
       *
       * <code>optional string workspace_root = 4;</code>
       */
      public boolean hasWorkspaceRoot() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Absolute path to the root of the current Bazel user workspace.
       * </pre>
       *
       * <code>optional string workspace_root = 4;</code>
       */
      public java.lang.String getWorkspaceRoot() {
        java.lang.Object ref = workspaceRoot_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            workspaceRoot_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Absolute path to the root of the current Bazel user workspace.
       * </pre>
       *
       * <code>optional string workspace_root = 4;</code>
       */
      public com.google.protobuf.ByteString
          getWorkspaceRootBytes() {
        java.lang.Object ref = workspaceRoot_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          workspaceRoot_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Absolute path to the root of the current Bazel user workspace.
       * </pre>
       *
       * <code>optional string workspace_root = 4;</code>
       */
      public Builder setWorkspaceRoot(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        workspaceRoot_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute path to the root of the current Bazel user workspace.
       * </pre>
       *
       * <code>optional string workspace_root = 4;</code>
       */
      public Builder clearWorkspaceRoot() {
        bitField0_ = (bitField0_ & ~0x00000008);
        workspaceRoot_ = getDefaultInstance().getWorkspaceRoot();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Absolute path to the root of the current Bazel user workspace.
       * </pre>
       *
       * <code>optional string workspace_root = 4;</code>
       */
      public Builder setWorkspaceRootBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        workspaceRoot_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList cpuArchitecture_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCpuArchitectureIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cpuArchitecture_ = new com.google.protobuf.LazyStringArrayList(cpuArchitecture_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCpuArchitectureList() {
        return cpuArchitecture_.getUnmodifiableView();
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public int getCpuArchitectureCount() {
        return cpuArchitecture_.size();
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public java.lang.String getCpuArchitecture(int index) {
        return cpuArchitecture_.get(index);
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public com.google.protobuf.ByteString
          getCpuArchitectureBytes(int index) {
        return cpuArchitecture_.getByteString(index);
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public Builder setCpuArchitecture(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCpuArchitectureIsMutable();
        cpuArchitecture_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public Builder addCpuArchitecture(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCpuArchitectureIsMutable();
        cpuArchitecture_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public Builder addAllCpuArchitecture(
          java.lang.Iterable<java.lang.String> values) {
        ensureCpuArchitectureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cpuArchitecture_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public Builder clearCpuArchitecture() {
        cpuArchitecture_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * CPU architectures (armv7, arm64, i386, x86_64, etc.) used to build for
       * targets in the project.pbxproj file.
       * </pre>
       *
       * <code>repeated string cpu_architecture = 5;</code>
       */
      public Builder addCpuArchitectureBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCpuArchitectureIsMutable();
        cpuArchitecture_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:build.xcode.Control)
    }

    // @@protoc_insertion_point(class_scope:build.xcode.Control)
    private static final com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control();
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Control>
        PARSER = new com.google.protobuf.AbstractParser<Control>() {
      public Control parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Control(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Control> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Control> getParserForType() {
      return PARSER;
    }

    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.Control getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DependencyControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:build.xcode.DependencyControl)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Label of the target in the project file that is depended upon.
     * </pre>
     *
     * <code>optional string target_label = 1;</code>
     */
    boolean hasTargetLabel();
    /**
     * <pre>
     * Label of the target in the project file that is depended upon.
     * </pre>
     *
     * <code>optional string target_label = 1;</code>
     */
    java.lang.String getTargetLabel();
    /**
     * <pre>
     * Label of the target in the project file that is depended upon.
     * </pre>
     *
     * <code>optional string target_label = 1;</code>
     */
    com.google.protobuf.ByteString
        getTargetLabelBytes();

    /**
     * <pre>
     * Set to true if this dependency is that of a xctest target on its TEST_HOST.
     * Considered 'false' if omitted.
     * </pre>
     *
     * <code>optional bool test_host = 2;</code>
     */
    boolean hasTestHost();
    /**
     * <pre>
     * Set to true if this dependency is that of a xctest target on its TEST_HOST.
     * Considered 'false' if omitted.
     * </pre>
     *
     * <code>optional bool test_host = 2;</code>
     */
    boolean getTestHost();
  }
  /**
   * <pre>
   * Information about dependency on a separate target.
   * </pre>
   *
   * Protobuf type {@code build.xcode.DependencyControl}
   */
  public  static final class DependencyControl extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:build.xcode.DependencyControl)
      DependencyControlOrBuilder {
    // Use DependencyControl.newBuilder() to construct.
    private DependencyControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DependencyControl() {
      targetLabel_ = "";
      testHost_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DependencyControl(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              targetLabel_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              testHost_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_DependencyControl_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_DependencyControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder.class);
    }

    private int bitField0_;
    public static final int TARGET_LABEL_FIELD_NUMBER = 1;
    private volatile java.lang.Object targetLabel_;
    /**
     * <pre>
     * Label of the target in the project file that is depended upon.
     * </pre>
     *
     * <code>optional string target_label = 1;</code>
     */
    public boolean hasTargetLabel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Label of the target in the project file that is depended upon.
     * </pre>
     *
     * <code>optional string target_label = 1;</code>
     */
    public java.lang.String getTargetLabel() {
      java.lang.Object ref = targetLabel_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          targetLabel_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Label of the target in the project file that is depended upon.
     * </pre>
     *
     * <code>optional string target_label = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTargetLabelBytes() {
      java.lang.Object ref = targetLabel_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        targetLabel_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TEST_HOST_FIELD_NUMBER = 2;
    private boolean testHost_;
    /**
     * <pre>
     * Set to true if this dependency is that of a xctest target on its TEST_HOST.
     * Considered 'false' if omitted.
     * </pre>
     *
     * <code>optional bool test_host = 2;</code>
     */
    public boolean hasTestHost() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Set to true if this dependency is that of a xctest target on its TEST_HOST.
     * Considered 'false' if omitted.
     * </pre>
     *
     * <code>optional bool test_host = 2;</code>
     */
    public boolean getTestHost() {
      return testHost_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, targetLabel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, testHost_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, targetLabel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, testHost_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl)) {
        return super.equals(obj);
      }
      com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl other = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl) obj;

      boolean result = true;
      result = result && (hasTargetLabel() == other.hasTargetLabel());
      if (hasTargetLabel()) {
        result = result && getTargetLabel()
            .equals(other.getTargetLabel());
      }
      result = result && (hasTestHost() == other.hasTestHost());
      if (hasTestHost()) {
        result = result && (getTestHost()
            == other.getTestHost());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTargetLabel()) {
        hash = (37 * hash) + TARGET_LABEL_FIELD_NUMBER;
        hash = (53 * hash) + getTargetLabel().hashCode();
      }
      if (hasTestHost()) {
        hash = (37 * hash) + TEST_HOST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTestHost());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about dependency on a separate target.
     * </pre>
     *
     * Protobuf type {@code build.xcode.DependencyControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:build.xcode.DependencyControl)
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_DependencyControl_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_DependencyControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder.class);
      }

      // Construct using com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        targetLabel_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        testHost_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_DependencyControl_descriptor;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl getDefaultInstanceForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.getDefaultInstance();
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl build() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl buildPartial() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl result = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.targetLabel_ = targetLabel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.testHost_ = testHost_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl) {
          return mergeFrom((com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl other) {
        if (other == com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.getDefaultInstance()) return this;
        if (other.hasTargetLabel()) {
          bitField0_ |= 0x00000001;
          targetLabel_ = other.targetLabel_;
          onChanged();
        }
        if (other.hasTestHost()) {
          setTestHost(other.getTestHost());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object targetLabel_ = "";
      /**
       * <pre>
       * Label of the target in the project file that is depended upon.
       * </pre>
       *
       * <code>optional string target_label = 1;</code>
       */
      public boolean hasTargetLabel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Label of the target in the project file that is depended upon.
       * </pre>
       *
       * <code>optional string target_label = 1;</code>
       */
      public java.lang.String getTargetLabel() {
        java.lang.Object ref = targetLabel_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            targetLabel_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Label of the target in the project file that is depended upon.
       * </pre>
       *
       * <code>optional string target_label = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTargetLabelBytes() {
        java.lang.Object ref = targetLabel_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          targetLabel_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Label of the target in the project file that is depended upon.
       * </pre>
       *
       * <code>optional string target_label = 1;</code>
       */
      public Builder setTargetLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        targetLabel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Label of the target in the project file that is depended upon.
       * </pre>
       *
       * <code>optional string target_label = 1;</code>
       */
      public Builder clearTargetLabel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        targetLabel_ = getDefaultInstance().getTargetLabel();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Label of the target in the project file that is depended upon.
       * </pre>
       *
       * <code>optional string target_label = 1;</code>
       */
      public Builder setTargetLabelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        targetLabel_ = value;
        onChanged();
        return this;
      }

      private boolean testHost_ ;
      /**
       * <pre>
       * Set to true if this dependency is that of a xctest target on its TEST_HOST.
       * Considered 'false' if omitted.
       * </pre>
       *
       * <code>optional bool test_host = 2;</code>
       */
      public boolean hasTestHost() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Set to true if this dependency is that of a xctest target on its TEST_HOST.
       * Considered 'false' if omitted.
       * </pre>
       *
       * <code>optional bool test_host = 2;</code>
       */
      public boolean getTestHost() {
        return testHost_;
      }
      /**
       * <pre>
       * Set to true if this dependency is that of a xctest target on its TEST_HOST.
       * Considered 'false' if omitted.
       * </pre>
       *
       * <code>optional bool test_host = 2;</code>
       */
      public Builder setTestHost(boolean value) {
        bitField0_ |= 0x00000002;
        testHost_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true if this dependency is that of a xctest target on its TEST_HOST.
       * Considered 'false' if omitted.
       * </pre>
       *
       * <code>optional bool test_host = 2;</code>
       */
      public Builder clearTestHost() {
        bitField0_ = (bitField0_ & ~0x00000002);
        testHost_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:build.xcode.DependencyControl)
    }

    // @@protoc_insertion_point(class_scope:build.xcode.DependencyControl)
    private static final com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl();
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<DependencyControl>
        PARSER = new com.google.protobuf.AbstractParser<DependencyControl>() {
      public DependencyControl parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DependencyControl(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DependencyControl> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DependencyControl> getParserForType() {
      return PARSER;
    }

    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TargetControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:build.xcode.TargetControl)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A short name for the target that need not be unique. For instance, for
     * binary targets this corresponds to the product name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * A short name for the target that need not be unique. For instance, for
     * binary targets this corresponds to the product name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * A short name for the target that need not be unique. For instance, for
     * binary targets this corresponds to the product name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    java.util.List<java.lang.String>
        getSourceFileList();
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    int getSourceFileCount();
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    java.lang.String getSourceFile(int index);
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    com.google.protobuf.ByteString
        getSourceFileBytes(int index);

    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    java.util.List<java.lang.String>
        getNonArcSourceFileList();
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    int getNonArcSourceFileCount();
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    java.lang.String getNonArcSourceFile(int index);
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    com.google.protobuf.ByteString
        getNonArcSourceFileBytes(int index);

    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    java.util.List<java.lang.String>
        getSupportFileList();
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    int getSupportFileCount();
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    java.lang.String getSupportFile(int index);
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getSupportFileBytes(int index);

    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl> 
        getDependencyList();
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl getDependency(int index);
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    int getDependencyCount();
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder> 
        getDependencyOrBuilderList();
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder getDependencyOrBuilder(
        int index);

    /**
     * <pre>
     * (Used for objc_binary and objc_bundle_library targets) path to the
     * -Info.plist file for the application.
     * </pre>
     *
     * <code>optional string infoplist = 5;</code>
     */
    boolean hasInfoplist();
    /**
     * <pre>
     * (Used for objc_binary and objc_bundle_library targets) path to the
     * -Info.plist file for the application.
     * </pre>
     *
     * <code>optional string infoplist = 5;</code>
     */
    java.lang.String getInfoplist();
    /**
     * <pre>
     * (Used for objc_binary and objc_bundle_library targets) path to the
     * -Info.plist file for the application.
     * </pre>
     *
     * <code>optional string infoplist = 5;</code>
     */
    com.google.protobuf.ByteString
        getInfoplistBytes();

    /**
     * <pre>
     * A unique name for the target in the project. This is similar to the name
     * field, but is globally unique and may be long.
     * </pre>
     *
     * <code>optional string label = 7;</code>
     */
    boolean hasLabel();
    /**
     * <pre>
     * A unique name for the target in the project. This is similar to the name
     * field, but is globally unique and may be long.
     * </pre>
     *
     * <code>optional string label = 7;</code>
     */
    java.lang.String getLabel();
    /**
     * <pre>
     * A unique name for the target in the project. This is similar to the name
     * field, but is globally unique and may be long.
     * </pre>
     *
     * <code>optional string label = 7;</code>
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    java.util.List<java.lang.String>
        getCoptList();
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    int getCoptCount();
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    java.lang.String getCopt(int index);
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    com.google.protobuf.ByteString
        getCoptBytes(int index);

    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    java.util.List<java.lang.String>
        getLinkoptList();
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    int getLinkoptCount();
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    java.lang.String getLinkopt(int index);
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    com.google.protobuf.ByteString
        getLinkoptBytes(int index);

    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    java.util.List<java.lang.String>
        getXcassetsDirList();
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    int getXcassetsDirCount();
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    java.lang.String getXcassetsDir(int index);
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    com.google.protobuf.ByteString
        getXcassetsDirBytes(int index);

    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> 
        getBuildSettingList();
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getBuildSetting(int index);
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    int getBuildSettingCount();
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
        getBuildSettingOrBuilderList();
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder getBuildSettingOrBuilder(
        int index);

    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    java.util.List<java.lang.String>
        getGeneralResourceFileList();
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    int getGeneralResourceFileCount();
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    java.lang.String getGeneralResourceFile(int index);
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    com.google.protobuf.ByteString
        getGeneralResourceFileBytes(int index);

    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    java.util.List<java.lang.String>
        getSdkFrameworkList();
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    int getSdkFrameworkCount();
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    java.lang.String getSdkFramework(int index);
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    com.google.protobuf.ByteString
        getSdkFrameworkBytes(int index);

    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    java.util.List<java.lang.String>
        getFrameworkList();
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    int getFrameworkCount();
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    java.lang.String getFramework(int index);
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    com.google.protobuf.ByteString
        getFrameworkBytes(int index);

    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    java.util.List<java.lang.String>
        getFrameworkSearchPathOnlyList();
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    int getFrameworkSearchPathOnlyCount();
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    java.lang.String getFrameworkSearchPathOnly(int index);
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    com.google.protobuf.ByteString
        getFrameworkSearchPathOnlyBytes(int index);

    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    java.util.List<java.lang.String>
        getXcdatamodelList();
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    int getXcdatamodelCount();
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    java.lang.String getXcdatamodel(int index);
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    com.google.protobuf.ByteString
        getXcdatamodelBytes(int index);

    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    java.util.List<java.lang.String>
        getImportedLibraryList();
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    int getImportedLibraryCount();
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    java.lang.String getImportedLibrary(int index);
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    com.google.protobuf.ByteString
        getImportedLibraryBytes(int index);

    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    java.util.List<java.lang.String>
        getUserHeaderSearchPathList();
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    int getUserHeaderSearchPathCount();
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    java.lang.String getUserHeaderSearchPath(int index);
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    com.google.protobuf.ByteString
        getUserHeaderSearchPathBytes(int index);

    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    java.util.List<java.lang.String>
        getHeaderSearchPathList();
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    int getHeaderSearchPathCount();
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    java.lang.String getHeaderSearchPath(int index);
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    com.google.protobuf.ByteString
        getHeaderSearchPathBytes(int index);

    /**
     * <pre>
     * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
     * build_setting field because the build_setting field requires paths to be
     * specified relative to the container of the .xcodeproj directory, while
     * this attribute is relative to the same path as every other path in the
     * control file.
     * </pre>
     *
     * <code>optional string pch_path = 20;</code>
     */
    boolean hasPchPath();
    /**
     * <pre>
     * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
     * build_setting field because the build_setting field requires paths to be
     * specified relative to the container of the .xcodeproj directory, while
     * this attribute is relative to the same path as every other path in the
     * control file.
     * </pre>
     *
     * <code>optional string pch_path = 20;</code>
     */
    java.lang.String getPchPath();
    /**
     * <pre>
     * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
     * build_setting field because the build_setting field requires paths to be
     * specified relative to the container of the .xcodeproj directory, while
     * this attribute is relative to the same path as every other path in the
     * control file.
     * </pre>
     *
     * <code>optional string pch_path = 20;</code>
     */
    com.google.protobuf.ByteString
        getPchPathBytes();

    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    java.util.List<java.lang.String>
        getBundleImportList();
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    int getBundleImportCount();
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    java.lang.String getBundleImport(int index);
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    com.google.protobuf.ByteString
        getBundleImportBytes(int index);

    /**
     * <pre>
     * The product type, for instance "com.apple.product-type.bundle". If
     * omitted, the presence of the infoplist field indicates the type:
     * has infoplist: "com.apple.product-type.application"
     * does not have infoplist: "com.apple.product-type.library.static"
     * </pre>
     *
     * <code>optional string product_type = 18;</code>
     */
    boolean hasProductType();
    /**
     * <pre>
     * The product type, for instance "com.apple.product-type.bundle". If
     * omitted, the presence of the infoplist field indicates the type:
     * has infoplist: "com.apple.product-type.application"
     * does not have infoplist: "com.apple.product-type.library.static"
     * </pre>
     *
     * <code>optional string product_type = 18;</code>
     */
    java.lang.String getProductType();
    /**
     * <pre>
     * The product type, for instance "com.apple.product-type.bundle". If
     * omitted, the presence of the infoplist field indicates the type:
     * has infoplist: "com.apple.product-type.application"
     * does not have infoplist: "com.apple.product-type.library.static"
     * </pre>
     *
     * <code>optional string product_type = 18;</code>
     */
    com.google.protobuf.ByteString
        getProductTypeBytes();

    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    java.util.List<java.lang.String>
        getSdkDylibList();
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    int getSdkDylibCount();
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    java.lang.String getSdkDylib(int index);
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    com.google.protobuf.ByteString
        getSdkDylibBytes(int index);
  }
  /**
   * <pre>
   * Contains information specific to a single target in the project file.
   * Next ID: 24
   * </pre>
   *
   * Protobuf type {@code build.xcode.TargetControl}
   */
  public  static final class TargetControl extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:build.xcode.TargetControl)
      TargetControlOrBuilder {
    // Use TargetControl.newBuilder() to construct.
    private TargetControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TargetControl() {
      name_ = "";
      sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      nonArcSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      supportFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      dependency_ = java.util.Collections.emptyList();
      infoplist_ = "";
      label_ = "";
      copt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      linkopt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      xcassetsDir_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      buildSetting_ = java.util.Collections.emptyList();
      generalResourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      sdkFramework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      framework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      frameworkSearchPathOnly_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      xcdatamodel_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      importedLibrary_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      userHeaderSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      headerSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      pchPath_ = "";
      bundleImport_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      productType_ = "";
      sdkDylib_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TargetControl(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                sourceFile_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              sourceFile_.add(bs);
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                supportFile_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              supportFile_.add(bs);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                dependency_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl>();
                mutable_bitField0_ |= 0x00000010;
              }
              dependency_.add(
                  input.readMessage(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              infoplist_ = bs;
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                nonArcSourceFile_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              nonArcSourceFile_.add(bs);
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              label_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                copt_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              copt_.add(bs);
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                xcassetsDir_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000200;
              }
              xcassetsDir_.add(bs);
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                buildSetting_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting>();
                mutable_bitField0_ |= 0x00000400;
              }
              buildSetting_.add(
                  input.readMessage(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                generalResourceFile_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000800;
              }
              generalResourceFile_.add(bs);
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                sdkFramework_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00001000;
              }
              sdkFramework_.add(bs);
              break;
            }
            case 106: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                xcdatamodel_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00008000;
              }
              xcdatamodel_.add(bs);
              break;
            }
            case 114: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                importedLibrary_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00010000;
              }
              importedLibrary_.add(bs);
              break;
            }
            case 122: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                userHeaderSearchPath_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00020000;
              }
              userHeaderSearchPath_.add(bs);
              break;
            }
            case 130: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                headerSearchPath_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00040000;
              }
              headerSearchPath_.add(bs);
              break;
            }
            case 138: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                bundleImport_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00100000;
              }
              bundleImport_.add(bs);
              break;
            }
            case 146: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              productType_ = bs;
              break;
            }
            case 154: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                sdkDylib_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00400000;
              }
              sdkDylib_.add(bs);
              break;
            }
            case 162: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              pchPath_ = bs;
              break;
            }
            case 170: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                framework_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00002000;
              }
              framework_.add(bs);
              break;
            }
            case 178: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                linkopt_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000100;
              }
              linkopt_.add(bs);
              break;
            }
            case 186: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                frameworkSearchPathOnly_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00004000;
              }
              frameworkSearchPathOnly_.add(bs);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          sourceFile_ = sourceFile_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          supportFile_ = supportFile_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          dependency_ = java.util.Collections.unmodifiableList(dependency_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          nonArcSourceFile_ = nonArcSourceFile_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          copt_ = copt_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          xcassetsDir_ = xcassetsDir_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          buildSetting_ = java.util.Collections.unmodifiableList(buildSetting_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          generalResourceFile_ = generalResourceFile_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          sdkFramework_ = sdkFramework_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          xcdatamodel_ = xcdatamodel_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          importedLibrary_ = importedLibrary_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          userHeaderSearchPath_ = userHeaderSearchPath_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          headerSearchPath_ = headerSearchPath_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          bundleImport_ = bundleImport_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          sdkDylib_ = sdkDylib_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          framework_ = framework_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          linkopt_ = linkopt_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          frameworkSearchPathOnly_ = frameworkSearchPathOnly_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_TargetControl_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_TargetControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * A short name for the target that need not be unique. For instance, for
     * binary targets this corresponds to the product name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * A short name for the target that need not be unique. For instance, for
     * binary targets this corresponds to the product name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A short name for the target that need not be unique. For instance, for
     * binary targets this corresponds to the product name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SOURCE_FILE_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList sourceFile_;
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSourceFileList() {
      return sourceFile_;
    }
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    public int getSourceFileCount() {
      return sourceFile_.size();
    }
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    public java.lang.String getSourceFile(int index) {
      return sourceFile_.get(index);
    }
    /**
     * <pre>
     * Relative paths to source files to compile. Each source file is added to
     * the sources build phase of the target, so any file accepted by Xcode is
     * valid.
     * </pre>
     *
     * <code>repeated string source_file = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSourceFileBytes(int index) {
      return sourceFile_.getByteString(index);
    }

    public static final int NON_ARC_SOURCE_FILE_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList nonArcSourceFile_;
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getNonArcSourceFileList() {
      return nonArcSourceFile_;
    }
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    public int getNonArcSourceFileCount() {
      return nonArcSourceFile_.size();
    }
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    public java.lang.String getNonArcSourceFile(int index) {
      return nonArcSourceFile_.get(index);
    }
    /**
     * <pre>
     * Identical to source_file, but only Objective-C[++] source files are
     * valid. These sources are compiled without ARC.
     * </pre>
     *
     * <code>repeated string non_arc_source_file = 6;</code>
     */
    public com.google.protobuf.ByteString
        getNonArcSourceFileBytes(int index) {
      return nonArcSourceFile_.getByteString(index);
    }

    public static final int SUPPORT_FILE_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList supportFile_;
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSupportFileList() {
      return supportFile_;
    }
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    public int getSupportFileCount() {
      return supportFile_.size();
    }
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    public java.lang.String getSupportFile(int index) {
      return supportFile_.get(index);
    }
    /**
     * <pre>
     * Relative paths to support files, such as BUILD, header, and non-compiled
     * source files. These are included in the project so they can be opened in
     * the project explorer view, but are not compiled into object files.
     * </pre>
     *
     * <code>repeated string support_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getSupportFileBytes(int index) {
      return supportFile_.getByteString(index);
    }

    public static final int DEPENDENCY_FIELD_NUMBER = 4;
    private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl> dependency_;
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl> getDependencyList() {
      return dependency_;
    }
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder> 
        getDependencyOrBuilderList() {
      return dependency_;
    }
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    public int getDependencyCount() {
      return dependency_.size();
    }
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl getDependency(int index) {
      return dependency_.get(index);
    }
    /**
     * <pre>
     * Dependencies this target has on other targets.
     * </pre>
     *
     * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder getDependencyOrBuilder(
        int index) {
      return dependency_.get(index);
    }

    public static final int INFOPLIST_FIELD_NUMBER = 5;
    private volatile java.lang.Object infoplist_;
    /**
     * <pre>
     * (Used for objc_binary and objc_bundle_library targets) path to the
     * -Info.plist file for the application.
     * </pre>
     *
     * <code>optional string infoplist = 5;</code>
     */
    public boolean hasInfoplist() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * (Used for objc_binary and objc_bundle_library targets) path to the
     * -Info.plist file for the application.
     * </pre>
     *
     * <code>optional string infoplist = 5;</code>
     */
    public java.lang.String getInfoplist() {
      java.lang.Object ref = infoplist_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          infoplist_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * (Used for objc_binary and objc_bundle_library targets) path to the
     * -Info.plist file for the application.
     * </pre>
     *
     * <code>optional string infoplist = 5;</code>
     */
    public com.google.protobuf.ByteString
        getInfoplistBytes() {
      java.lang.Object ref = infoplist_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        infoplist_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LABEL_FIELD_NUMBER = 7;
    private volatile java.lang.Object label_;
    /**
     * <pre>
     * A unique name for the target in the project. This is similar to the name
     * field, but is globally unique and may be long.
     * </pre>
     *
     * <code>optional string label = 7;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * A unique name for the target in the project. This is similar to the name
     * field, but is globally unique and may be long.
     * </pre>
     *
     * <code>optional string label = 7;</code>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A unique name for the target in the project. This is similar to the name
     * field, but is globally unique and may be long.
     * </pre>
     *
     * <code>optional string label = 7;</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COPT_FIELD_NUMBER = 8;
    private com.google.protobuf.LazyStringList copt_;
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCoptList() {
      return copt_;
    }
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    public int getCoptCount() {
      return copt_.size();
    }
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    public java.lang.String getCopt(int index) {
      return copt_.get(index);
    }
    /**
     * <pre>
     * Additional flags to pass to the [objective] c[++] compiler.
     * </pre>
     *
     * <code>repeated string copt = 8;</code>
     */
    public com.google.protobuf.ByteString
        getCoptBytes(int index) {
      return copt_.getByteString(index);
    }

    public static final int LINKOPT_FIELD_NUMBER = 22;
    private com.google.protobuf.LazyStringList linkopt_;
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getLinkoptList() {
      return linkopt_;
    }
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    public int getLinkoptCount() {
      return linkopt_.size();
    }
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    public java.lang.String getLinkopt(int index) {
      return linkopt_.get(index);
    }
    /**
     * <pre>
     * Additional flags to pass to the linker.
     * </pre>
     *
     * <code>repeated string linkopt = 22;</code>
     */
    public com.google.protobuf.ByteString
        getLinkoptBytes(int index) {
      return linkopt_.getByteString(index);
    }

    public static final int XCASSETS_DIR_FIELD_NUMBER = 9;
    private com.google.protobuf.LazyStringList xcassetsDir_;
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getXcassetsDirList() {
      return xcassetsDir_;
    }
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    public int getXcassetsDirCount() {
      return xcassetsDir_.size();
    }
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    public java.lang.String getXcassetsDir(int index) {
      return xcassetsDir_.get(index);
    }
    /**
     * <pre>
     * Paths to *.xcassets directories to include in the target as asset
     * catalogs. For all targets, this causes the .xcassets directory to be
     * included in the Project Navigator. For targets that can include them (e.g.
     * objc_binary), this causes them to be included in the resources build
     * phase.
     * </pre>
     *
     * <code>repeated string xcassets_dir = 9;</code>
     */
    public com.google.protobuf.ByteString
        getXcassetsDirBytes(int index) {
      return xcassetsDir_.getByteString(index);
    }

    public static final int BUILD_SETTING_FIELD_NUMBER = 10;
    private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> buildSetting_;
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> getBuildSettingList() {
      return buildSetting_;
    }
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
        getBuildSettingOrBuilderList() {
      return buildSetting_;
    }
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    public int getBuildSettingCount() {
      return buildSetting_.size();
    }
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getBuildSetting(int index) {
      return buildSetting_.get(index);
    }
    /**
     * <pre>
     * Miscellaneous build settings. Each setting is applied to all build
     * configurations.
     * </pre>
     *
     * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
     */
    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder getBuildSettingOrBuilder(
        int index) {
      return buildSetting_.get(index);
    }

    public static final int GENERAL_RESOURCE_FILE_FIELD_NUMBER = 11;
    private com.google.protobuf.LazyStringList generalResourceFile_;
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getGeneralResourceFileList() {
      return generalResourceFile_;
    }
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    public int getGeneralResourceFileCount() {
      return generalResourceFile_.size();
    }
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    public java.lang.String getGeneralResourceFile(int index) {
      return generalResourceFile_.get(index);
    }
    /**
     * <pre>
     * Paths to strings or xib files. Xcodegen will determine automatically if
     * they are localized (i.e. are in a directory named *.lproj) or not.
     * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
     * list of which can be used to specify all resources.
     * </pre>
     *
     * <code>repeated string general_resource_file = 11;</code>
     */
    public com.google.protobuf.ByteString
        getGeneralResourceFileBytes(int index) {
      return generalResourceFile_.getByteString(index);
    }

    public static final int SDK_FRAMEWORK_FIELD_NUMBER = 12;
    private com.google.protobuf.LazyStringList sdkFramework_;
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSdkFrameworkList() {
      return sdkFramework_;
    }
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    public int getSdkFrameworkCount() {
      return sdkFramework_.size();
    }
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    public java.lang.String getSdkFramework(int index) {
      return sdkFramework_.get(index);
    }
    /**
     * <pre>
     * SDK frameworks to link with this target. This should be every framework
     * required by the targets in the transitive dependency tree. Xcodegen does
     * not find these transitive dependencies automatically; they must be added
     * to this repeated field.
     * </pre>
     *
     * <code>repeated string sdk_framework = 12;</code>
     */
    public com.google.protobuf.ByteString
        getSdkFrameworkBytes(int index) {
      return sdkFramework_.getByteString(index);
    }

    public static final int FRAMEWORK_FIELD_NUMBER = 21;
    private com.google.protobuf.LazyStringList framework_;
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getFrameworkList() {
      return framework_;
    }
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    public int getFrameworkCount() {
      return framework_.size();
    }
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    public java.lang.String getFramework(int index) {
      return framework_.get(index);
    }
    /**
     * <pre>
     * Paths to non-SDK frameworks to link with this target, relative to the
     * same path as every other path in the control file. This should be every
     * framework required by the targets in the transitive dependency tree.
     * </pre>
     *
     * <code>repeated string framework = 21;</code>
     */
    public com.google.protobuf.ByteString
        getFrameworkBytes(int index) {
      return framework_.getByteString(index);
    }

    public static final int FRAMEWORK_SEARCH_PATH_ONLY_FIELD_NUMBER = 23;
    private com.google.protobuf.LazyStringList frameworkSearchPathOnly_;
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getFrameworkSearchPathOnlyList() {
      return frameworkSearchPathOnly_;
    }
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    public int getFrameworkSearchPathOnlyCount() {
      return frameworkSearchPathOnly_.size();
    }
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    public java.lang.String getFrameworkSearchPathOnly(int index) {
      return frameworkSearchPathOnly_.get(index);
    }
    /**
     * <pre>
     * Paths to non-SDK frameworks relative to the same path as every other path
     * in the control file.  These frameworks will be added to framework search
     * paths for the target (with -F) but will not actually be linked (that is,
     * there will be no -framework).
     * </pre>
     *
     * <code>repeated string framework_search_path_only = 23;</code>
     */
    public com.google.protobuf.ByteString
        getFrameworkSearchPathOnlyBytes(int index) {
      return frameworkSearchPathOnly_.getByteString(index);
    }

    public static final int XCDATAMODEL_FIELD_NUMBER = 13;
    private com.google.protobuf.LazyStringList xcdatamodel_;
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getXcdatamodelList() {
      return xcdatamodel_;
    }
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    public int getXcdatamodelCount() {
      return xcdatamodel_.size();
    }
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    public java.lang.String getXcdatamodel(int index) {
      return xcdatamodel_.get(index);
    }
    /**
     * <pre>
     * Path to all .xcdatamodel directories required. All directories inside
     * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
     * the .xcdatamodeld directory.
     * </pre>
     *
     * <code>repeated string xcdatamodel = 13;</code>
     */
    public com.google.protobuf.ByteString
        getXcdatamodelBytes(int index) {
      return xcdatamodel_.getByteString(index);
    }

    public static final int IMPORTED_LIBRARY_FIELD_NUMBER = 14;
    private com.google.protobuf.LazyStringList importedLibrary_;
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getImportedLibraryList() {
      return importedLibrary_;
    }
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    public int getImportedLibraryCount() {
      return importedLibrary_.size();
    }
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    public java.lang.String getImportedLibrary(int index) {
      return importedLibrary_.get(index);
    }
    /**
     * <pre>
     * Path to all .a libraries to link with this target. When used on static
     * library targets, the library is not actually linked, but it will appear
     * in the Xcode Project Navigator. These are considered to be pre-built
     * libraries. In other words, they are NOT built by Xcode as a dependency
     * before this target is built.
     * </pre>
     *
     * <code>repeated string imported_library = 14;</code>
     */
    public com.google.protobuf.ByteString
        getImportedLibraryBytes(int index) {
      return importedLibrary_.getByteString(index);
    }

    public static final int USER_HEADER_SEARCH_PATH_FIELD_NUMBER = 15;
    private com.google.protobuf.LazyStringList userHeaderSearchPath_;
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getUserHeaderSearchPathList() {
      return userHeaderSearchPath_;
    }
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    public int getUserHeaderSearchPathCount() {
      return userHeaderSearchPath_.size();
    }
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    public java.lang.String getUserHeaderSearchPath(int index) {
      return userHeaderSearchPath_.get(index);
    }
    /**
     * <pre>
     * Path to directories to include as user header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-iquote" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string user_header_search_path = 15;</code>
     */
    public com.google.protobuf.ByteString
        getUserHeaderSearchPathBytes(int index) {
      return userHeaderSearchPath_.getByteString(index);
    }

    public static final int HEADER_SEARCH_PATH_FIELD_NUMBER = 16;
    private com.google.protobuf.LazyStringList headerSearchPath_;
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getHeaderSearchPathList() {
      return headerSearchPath_;
    }
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    public int getHeaderSearchPathCount() {
      return headerSearchPath_.size();
    }
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    public java.lang.String getHeaderSearchPath(int index) {
      return headerSearchPath_.get(index);
    }
    /**
     * <pre>
     * Path to directories to include as header search paths. These are non-
     * recursive. These should be specified here rather than in the build_setting
     * field because the build_setting field requires paths to be specified
     * relative to the container of the .xcodeproj directory, while this
     * attribute is relative to the same path as every other path in the control
     * file. These paths correspond to the "-I" arguments passed to the
     * compiler.
     * </pre>
     *
     * <code>repeated string header_search_path = 16;</code>
     */
    public com.google.protobuf.ByteString
        getHeaderSearchPathBytes(int index) {
      return headerSearchPath_.getByteString(index);
    }

    public static final int PCH_PATH_FIELD_NUMBER = 20;
    private volatile java.lang.Object pchPath_;
    /**
     * <pre>
     * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
     * build_setting field because the build_setting field requires paths to be
     * specified relative to the container of the .xcodeproj directory, while
     * this attribute is relative to the same path as every other path in the
     * control file.
     * </pre>
     *
     * <code>optional string pch_path = 20;</code>
     */
    public boolean hasPchPath() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
     * build_setting field because the build_setting field requires paths to be
     * specified relative to the container of the .xcodeproj directory, while
     * this attribute is relative to the same path as every other path in the
     * control file.
     * </pre>
     *
     * <code>optional string pch_path = 20;</code>
     */
    public java.lang.String getPchPath() {
      java.lang.Object ref = pchPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          pchPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
     * build_setting field because the build_setting field requires paths to be
     * specified relative to the container of the .xcodeproj directory, while
     * this attribute is relative to the same path as every other path in the
     * control file.
     * </pre>
     *
     * <code>optional string pch_path = 20;</code>
     */
    public com.google.protobuf.ByteString
        getPchPathBytes() {
      java.lang.Object ref = pchPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pchPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BUNDLE_IMPORT_FIELD_NUMBER = 17;
    private com.google.protobuf.LazyStringList bundleImport_;
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getBundleImportList() {
      return bundleImport_;
    }
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    public int getBundleImportCount() {
      return bundleImport_.size();
    }
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    public java.lang.String getBundleImport(int index) {
      return bundleImport_.get(index);
    }
    /**
     * <pre>
     * Path to .bundle directories this target depends on. For static library
     * targets, this only causes the bundle to appear in the Project Navigator.
     * For application target, this also causes the bundle to be linked with the
     * application.
     * </pre>
     *
     * <code>repeated string bundle_import = 17;</code>
     */
    public com.google.protobuf.ByteString
        getBundleImportBytes(int index) {
      return bundleImport_.getByteString(index);
    }

    public static final int PRODUCT_TYPE_FIELD_NUMBER = 18;
    private volatile java.lang.Object productType_;
    /**
     * <pre>
     * The product type, for instance "com.apple.product-type.bundle". If
     * omitted, the presence of the infoplist field indicates the type:
     * has infoplist: "com.apple.product-type.application"
     * does not have infoplist: "com.apple.product-type.library.static"
     * </pre>
     *
     * <code>optional string product_type = 18;</code>
     */
    public boolean hasProductType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The product type, for instance "com.apple.product-type.bundle". If
     * omitted, the presence of the infoplist field indicates the type:
     * has infoplist: "com.apple.product-type.application"
     * does not have infoplist: "com.apple.product-type.library.static"
     * </pre>
     *
     * <code>optional string product_type = 18;</code>
     */
    public java.lang.String getProductType() {
      java.lang.Object ref = productType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          productType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The product type, for instance "com.apple.product-type.bundle". If
     * omitted, the presence of the infoplist field indicates the type:
     * has infoplist: "com.apple.product-type.application"
     * does not have infoplist: "com.apple.product-type.library.static"
     * </pre>
     *
     * <code>optional string product_type = 18;</code>
     */
    public com.google.protobuf.ByteString
        getProductTypeBytes() {
      java.lang.Object ref = productType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        productType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SDK_DYLIB_FIELD_NUMBER = 19;
    private com.google.protobuf.LazyStringList sdkDylib_;
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSdkDylibList() {
      return sdkDylib_;
    }
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    public int getSdkDylibCount() {
      return sdkDylib_.size();
    }
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    public java.lang.String getSdkDylib(int index) {
      return sdkDylib_.get(index);
    }
    /**
     * <pre>
     * SDK .dylib files to link with this target. Each name should not include the
     * the path or the .dylib extension, e.g. "libz" to link in
     * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
     * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
     * targets, this causes the library to be linked with the final binary.
     * </pre>
     *
     * <code>repeated string sdk_dylib = 19;</code>
     */
    public com.google.protobuf.ByteString
        getSdkDylibBytes(int index) {
      return sdkDylib_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      for (int i = 0; i < sourceFile_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceFile_.getRaw(i));
      }
      for (int i = 0; i < supportFile_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, supportFile_.getRaw(i));
      }
      for (int i = 0; i < dependency_.size(); i++) {
        output.writeMessage(4, dependency_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, infoplist_);
      }
      for (int i = 0; i < nonArcSourceFile_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, nonArcSourceFile_.getRaw(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, label_);
      }
      for (int i = 0; i < copt_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, copt_.getRaw(i));
      }
      for (int i = 0; i < xcassetsDir_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, xcassetsDir_.getRaw(i));
      }
      for (int i = 0; i < buildSetting_.size(); i++) {
        output.writeMessage(10, buildSetting_.get(i));
      }
      for (int i = 0; i < generalResourceFile_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, generalResourceFile_.getRaw(i));
      }
      for (int i = 0; i < sdkFramework_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, sdkFramework_.getRaw(i));
      }
      for (int i = 0; i < xcdatamodel_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 13, xcdatamodel_.getRaw(i));
      }
      for (int i = 0; i < importedLibrary_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, importedLibrary_.getRaw(i));
      }
      for (int i = 0; i < userHeaderSearchPath_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 15, userHeaderSearchPath_.getRaw(i));
      }
      for (int i = 0; i < headerSearchPath_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 16, headerSearchPath_.getRaw(i));
      }
      for (int i = 0; i < bundleImport_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 17, bundleImport_.getRaw(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, productType_);
      }
      for (int i = 0; i < sdkDylib_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 19, sdkDylib_.getRaw(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 20, pchPath_);
      }
      for (int i = 0; i < framework_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 21, framework_.getRaw(i));
      }
      for (int i = 0; i < linkopt_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, linkopt_.getRaw(i));
      }
      for (int i = 0; i < frameworkSearchPathOnly_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 23, frameworkSearchPathOnly_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sourceFile_.size(); i++) {
          dataSize += computeStringSizeNoTag(sourceFile_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSourceFileList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < supportFile_.size(); i++) {
          dataSize += computeStringSizeNoTag(supportFile_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSupportFileList().size();
      }
      for (int i = 0; i < dependency_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, dependency_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, infoplist_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < nonArcSourceFile_.size(); i++) {
          dataSize += computeStringSizeNoTag(nonArcSourceFile_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getNonArcSourceFileList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, label_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < copt_.size(); i++) {
          dataSize += computeStringSizeNoTag(copt_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCoptList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xcassetsDir_.size(); i++) {
          dataSize += computeStringSizeNoTag(xcassetsDir_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getXcassetsDirList().size();
      }
      for (int i = 0; i < buildSetting_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, buildSetting_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < generalResourceFile_.size(); i++) {
          dataSize += computeStringSizeNoTag(generalResourceFile_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getGeneralResourceFileList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sdkFramework_.size(); i++) {
          dataSize += computeStringSizeNoTag(sdkFramework_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSdkFrameworkList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xcdatamodel_.size(); i++) {
          dataSize += computeStringSizeNoTag(xcdatamodel_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getXcdatamodelList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < importedLibrary_.size(); i++) {
          dataSize += computeStringSizeNoTag(importedLibrary_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getImportedLibraryList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userHeaderSearchPath_.size(); i++) {
          dataSize += computeStringSizeNoTag(userHeaderSearchPath_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getUserHeaderSearchPathList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < headerSearchPath_.size(); i++) {
          dataSize += computeStringSizeNoTag(headerSearchPath_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getHeaderSearchPathList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bundleImport_.size(); i++) {
          dataSize += computeStringSizeNoTag(bundleImport_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getBundleImportList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, productType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sdkDylib_.size(); i++) {
          dataSize += computeStringSizeNoTag(sdkDylib_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getSdkDylibList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(20, pchPath_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < framework_.size(); i++) {
          dataSize += computeStringSizeNoTag(framework_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getFrameworkList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < linkopt_.size(); i++) {
          dataSize += computeStringSizeNoTag(linkopt_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getLinkoptList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < frameworkSearchPathOnly_.size(); i++) {
          dataSize += computeStringSizeNoTag(frameworkSearchPathOnly_.getRaw(i));
        }
        size += dataSize;
        size += 2 * getFrameworkSearchPathOnlyList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl)) {
        return super.equals(obj);
      }
      com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl other = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && getSourceFileList()
          .equals(other.getSourceFileList());
      result = result && getNonArcSourceFileList()
          .equals(other.getNonArcSourceFileList());
      result = result && getSupportFileList()
          .equals(other.getSupportFileList());
      result = result && getDependencyList()
          .equals(other.getDependencyList());
      result = result && (hasInfoplist() == other.hasInfoplist());
      if (hasInfoplist()) {
        result = result && getInfoplist()
            .equals(other.getInfoplist());
      }
      result = result && (hasLabel() == other.hasLabel());
      if (hasLabel()) {
        result = result && getLabel()
            .equals(other.getLabel());
      }
      result = result && getCoptList()
          .equals(other.getCoptList());
      result = result && getLinkoptList()
          .equals(other.getLinkoptList());
      result = result && getXcassetsDirList()
          .equals(other.getXcassetsDirList());
      result = result && getBuildSettingList()
          .equals(other.getBuildSettingList());
      result = result && getGeneralResourceFileList()
          .equals(other.getGeneralResourceFileList());
      result = result && getSdkFrameworkList()
          .equals(other.getSdkFrameworkList());
      result = result && getFrameworkList()
          .equals(other.getFrameworkList());
      result = result && getFrameworkSearchPathOnlyList()
          .equals(other.getFrameworkSearchPathOnlyList());
      result = result && getXcdatamodelList()
          .equals(other.getXcdatamodelList());
      result = result && getImportedLibraryList()
          .equals(other.getImportedLibraryList());
      result = result && getUserHeaderSearchPathList()
          .equals(other.getUserHeaderSearchPathList());
      result = result && getHeaderSearchPathList()
          .equals(other.getHeaderSearchPathList());
      result = result && (hasPchPath() == other.hasPchPath());
      if (hasPchPath()) {
        result = result && getPchPath()
            .equals(other.getPchPath());
      }
      result = result && getBundleImportList()
          .equals(other.getBundleImportList());
      result = result && (hasProductType() == other.hasProductType());
      if (hasProductType()) {
        result = result && getProductType()
            .equals(other.getProductType());
      }
      result = result && getSdkDylibList()
          .equals(other.getSdkDylibList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (getSourceFileCount() > 0) {
        hash = (37 * hash) + SOURCE_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getSourceFileList().hashCode();
      }
      if (getNonArcSourceFileCount() > 0) {
        hash = (37 * hash) + NON_ARC_SOURCE_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getNonArcSourceFileList().hashCode();
      }
      if (getSupportFileCount() > 0) {
        hash = (37 * hash) + SUPPORT_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getSupportFileList().hashCode();
      }
      if (getDependencyCount() > 0) {
        hash = (37 * hash) + DEPENDENCY_FIELD_NUMBER;
        hash = (53 * hash) + getDependencyList().hashCode();
      }
      if (hasInfoplist()) {
        hash = (37 * hash) + INFOPLIST_FIELD_NUMBER;
        hash = (53 * hash) + getInfoplist().hashCode();
      }
      if (hasLabel()) {
        hash = (37 * hash) + LABEL_FIELD_NUMBER;
        hash = (53 * hash) + getLabel().hashCode();
      }
      if (getCoptCount() > 0) {
        hash = (37 * hash) + COPT_FIELD_NUMBER;
        hash = (53 * hash) + getCoptList().hashCode();
      }
      if (getLinkoptCount() > 0) {
        hash = (37 * hash) + LINKOPT_FIELD_NUMBER;
        hash = (53 * hash) + getLinkoptList().hashCode();
      }
      if (getXcassetsDirCount() > 0) {
        hash = (37 * hash) + XCASSETS_DIR_FIELD_NUMBER;
        hash = (53 * hash) + getXcassetsDirList().hashCode();
      }
      if (getBuildSettingCount() > 0) {
        hash = (37 * hash) + BUILD_SETTING_FIELD_NUMBER;
        hash = (53 * hash) + getBuildSettingList().hashCode();
      }
      if (getGeneralResourceFileCount() > 0) {
        hash = (37 * hash) + GENERAL_RESOURCE_FILE_FIELD_NUMBER;
        hash = (53 * hash) + getGeneralResourceFileList().hashCode();
      }
      if (getSdkFrameworkCount() > 0) {
        hash = (37 * hash) + SDK_FRAMEWORK_FIELD_NUMBER;
        hash = (53 * hash) + getSdkFrameworkList().hashCode();
      }
      if (getFrameworkCount() > 0) {
        hash = (37 * hash) + FRAMEWORK_FIELD_NUMBER;
        hash = (53 * hash) + getFrameworkList().hashCode();
      }
      if (getFrameworkSearchPathOnlyCount() > 0) {
        hash = (37 * hash) + FRAMEWORK_SEARCH_PATH_ONLY_FIELD_NUMBER;
        hash = (53 * hash) + getFrameworkSearchPathOnlyList().hashCode();
      }
      if (getXcdatamodelCount() > 0) {
        hash = (37 * hash) + XCDATAMODEL_FIELD_NUMBER;
        hash = (53 * hash) + getXcdatamodelList().hashCode();
      }
      if (getImportedLibraryCount() > 0) {
        hash = (37 * hash) + IMPORTED_LIBRARY_FIELD_NUMBER;
        hash = (53 * hash) + getImportedLibraryList().hashCode();
      }
      if (getUserHeaderSearchPathCount() > 0) {
        hash = (37 * hash) + USER_HEADER_SEARCH_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getUserHeaderSearchPathList().hashCode();
      }
      if (getHeaderSearchPathCount() > 0) {
        hash = (37 * hash) + HEADER_SEARCH_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getHeaderSearchPathList().hashCode();
      }
      if (hasPchPath()) {
        hash = (37 * hash) + PCH_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPchPath().hashCode();
      }
      if (getBundleImportCount() > 0) {
        hash = (37 * hash) + BUNDLE_IMPORT_FIELD_NUMBER;
        hash = (53 * hash) + getBundleImportList().hashCode();
      }
      if (hasProductType()) {
        hash = (37 * hash) + PRODUCT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getProductType().hashCode();
      }
      if (getSdkDylibCount() > 0) {
        hash = (37 * hash) + SDK_DYLIB_FIELD_NUMBER;
        hash = (53 * hash) + getSdkDylibList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Contains information specific to a single target in the project file.
     * Next ID: 24
     * </pre>
     *
     * Protobuf type {@code build.xcode.TargetControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:build.xcode.TargetControl)
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_TargetControl_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_TargetControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.Builder.class);
      }

      // Construct using com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDependencyFieldBuilder();
          getBuildSettingFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        nonArcSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        supportFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (dependencyBuilder_ == null) {
          dependency_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          dependencyBuilder_.clear();
        }
        infoplist_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        label_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        copt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        linkopt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        xcassetsDir_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (buildSettingBuilder_ == null) {
          buildSetting_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          buildSettingBuilder_.clear();
        }
        generalResourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000800);
        sdkFramework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        framework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        frameworkSearchPathOnly_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        xcdatamodel_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        importedLibrary_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00010000);
        userHeaderSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00020000);
        headerSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00040000);
        pchPath_ = "";
        bitField0_ = (bitField0_ & ~0x00080000);
        bundleImport_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00100000);
        productType_ = "";
        bitField0_ = (bitField0_ & ~0x00200000);
        sdkDylib_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_TargetControl_descriptor;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl getDefaultInstanceForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.getDefaultInstance();
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl build() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl buildPartial() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl result = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          sourceFile_ = sourceFile_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.sourceFile_ = sourceFile_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          nonArcSourceFile_ = nonArcSourceFile_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.nonArcSourceFile_ = nonArcSourceFile_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          supportFile_ = supportFile_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.supportFile_ = supportFile_;
        if (dependencyBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            dependency_ = java.util.Collections.unmodifiableList(dependency_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.dependency_ = dependency_;
        } else {
          result.dependency_ = dependencyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.infoplist_ = infoplist_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.label_ = label_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          copt_ = copt_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.copt_ = copt_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          linkopt_ = linkopt_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.linkopt_ = linkopt_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          xcassetsDir_ = xcassetsDir_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.xcassetsDir_ = xcassetsDir_;
        if (buildSettingBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            buildSetting_ = java.util.Collections.unmodifiableList(buildSetting_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.buildSetting_ = buildSetting_;
        } else {
          result.buildSetting_ = buildSettingBuilder_.build();
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          generalResourceFile_ = generalResourceFile_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.generalResourceFile_ = generalResourceFile_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          sdkFramework_ = sdkFramework_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.sdkFramework_ = sdkFramework_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          framework_ = framework_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.framework_ = framework_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          frameworkSearchPathOnly_ = frameworkSearchPathOnly_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.frameworkSearchPathOnly_ = frameworkSearchPathOnly_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          xcdatamodel_ = xcdatamodel_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.xcdatamodel_ = xcdatamodel_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          importedLibrary_ = importedLibrary_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.importedLibrary_ = importedLibrary_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          userHeaderSearchPath_ = userHeaderSearchPath_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.userHeaderSearchPath_ = userHeaderSearchPath_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          headerSearchPath_ = headerSearchPath_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.headerSearchPath_ = headerSearchPath_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000008;
        }
        result.pchPath_ = pchPath_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          bundleImport_ = bundleImport_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.bundleImport_ = bundleImport_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.productType_ = productType_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          sdkDylib_ = sdkDylib_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.sdkDylib_ = sdkDylib_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl) {
          return mergeFrom((com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl other) {
        if (other == com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (!other.sourceFile_.isEmpty()) {
          if (sourceFile_.isEmpty()) {
            sourceFile_ = other.sourceFile_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSourceFileIsMutable();
            sourceFile_.addAll(other.sourceFile_);
          }
          onChanged();
        }
        if (!other.nonArcSourceFile_.isEmpty()) {
          if (nonArcSourceFile_.isEmpty()) {
            nonArcSourceFile_ = other.nonArcSourceFile_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNonArcSourceFileIsMutable();
            nonArcSourceFile_.addAll(other.nonArcSourceFile_);
          }
          onChanged();
        }
        if (!other.supportFile_.isEmpty()) {
          if (supportFile_.isEmpty()) {
            supportFile_ = other.supportFile_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSupportFileIsMutable();
            supportFile_.addAll(other.supportFile_);
          }
          onChanged();
        }
        if (dependencyBuilder_ == null) {
          if (!other.dependency_.isEmpty()) {
            if (dependency_.isEmpty()) {
              dependency_ = other.dependency_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureDependencyIsMutable();
              dependency_.addAll(other.dependency_);
            }
            onChanged();
          }
        } else {
          if (!other.dependency_.isEmpty()) {
            if (dependencyBuilder_.isEmpty()) {
              dependencyBuilder_.dispose();
              dependencyBuilder_ = null;
              dependency_ = other.dependency_;
              bitField0_ = (bitField0_ & ~0x00000010);
              dependencyBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDependencyFieldBuilder() : null;
            } else {
              dependencyBuilder_.addAllMessages(other.dependency_);
            }
          }
        }
        if (other.hasInfoplist()) {
          bitField0_ |= 0x00000020;
          infoplist_ = other.infoplist_;
          onChanged();
        }
        if (other.hasLabel()) {
          bitField0_ |= 0x00000040;
          label_ = other.label_;
          onChanged();
        }
        if (!other.copt_.isEmpty()) {
          if (copt_.isEmpty()) {
            copt_ = other.copt_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCoptIsMutable();
            copt_.addAll(other.copt_);
          }
          onChanged();
        }
        if (!other.linkopt_.isEmpty()) {
          if (linkopt_.isEmpty()) {
            linkopt_ = other.linkopt_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureLinkoptIsMutable();
            linkopt_.addAll(other.linkopt_);
          }
          onChanged();
        }
        if (!other.xcassetsDir_.isEmpty()) {
          if (xcassetsDir_.isEmpty()) {
            xcassetsDir_ = other.xcassetsDir_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureXcassetsDirIsMutable();
            xcassetsDir_.addAll(other.xcassetsDir_);
          }
          onChanged();
        }
        if (buildSettingBuilder_ == null) {
          if (!other.buildSetting_.isEmpty()) {
            if (buildSetting_.isEmpty()) {
              buildSetting_ = other.buildSetting_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureBuildSettingIsMutable();
              buildSetting_.addAll(other.buildSetting_);
            }
            onChanged();
          }
        } else {
          if (!other.buildSetting_.isEmpty()) {
            if (buildSettingBuilder_.isEmpty()) {
              buildSettingBuilder_.dispose();
              buildSettingBuilder_ = null;
              buildSetting_ = other.buildSetting_;
              bitField0_ = (bitField0_ & ~0x00000400);
              buildSettingBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBuildSettingFieldBuilder() : null;
            } else {
              buildSettingBuilder_.addAllMessages(other.buildSetting_);
            }
          }
        }
        if (!other.generalResourceFile_.isEmpty()) {
          if (generalResourceFile_.isEmpty()) {
            generalResourceFile_ = other.generalResourceFile_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureGeneralResourceFileIsMutable();
            generalResourceFile_.addAll(other.generalResourceFile_);
          }
          onChanged();
        }
        if (!other.sdkFramework_.isEmpty()) {
          if (sdkFramework_.isEmpty()) {
            sdkFramework_ = other.sdkFramework_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureSdkFrameworkIsMutable();
            sdkFramework_.addAll(other.sdkFramework_);
          }
          onChanged();
        }
        if (!other.framework_.isEmpty()) {
          if (framework_.isEmpty()) {
            framework_ = other.framework_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureFrameworkIsMutable();
            framework_.addAll(other.framework_);
          }
          onChanged();
        }
        if (!other.frameworkSearchPathOnly_.isEmpty()) {
          if (frameworkSearchPathOnly_.isEmpty()) {
            frameworkSearchPathOnly_ = other.frameworkSearchPathOnly_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureFrameworkSearchPathOnlyIsMutable();
            frameworkSearchPathOnly_.addAll(other.frameworkSearchPathOnly_);
          }
          onChanged();
        }
        if (!other.xcdatamodel_.isEmpty()) {
          if (xcdatamodel_.isEmpty()) {
            xcdatamodel_ = other.xcdatamodel_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureXcdatamodelIsMutable();
            xcdatamodel_.addAll(other.xcdatamodel_);
          }
          onChanged();
        }
        if (!other.importedLibrary_.isEmpty()) {
          if (importedLibrary_.isEmpty()) {
            importedLibrary_ = other.importedLibrary_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureImportedLibraryIsMutable();
            importedLibrary_.addAll(other.importedLibrary_);
          }
          onChanged();
        }
        if (!other.userHeaderSearchPath_.isEmpty()) {
          if (userHeaderSearchPath_.isEmpty()) {
            userHeaderSearchPath_ = other.userHeaderSearchPath_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureUserHeaderSearchPathIsMutable();
            userHeaderSearchPath_.addAll(other.userHeaderSearchPath_);
          }
          onChanged();
        }
        if (!other.headerSearchPath_.isEmpty()) {
          if (headerSearchPath_.isEmpty()) {
            headerSearchPath_ = other.headerSearchPath_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureHeaderSearchPathIsMutable();
            headerSearchPath_.addAll(other.headerSearchPath_);
          }
          onChanged();
        }
        if (other.hasPchPath()) {
          bitField0_ |= 0x00080000;
          pchPath_ = other.pchPath_;
          onChanged();
        }
        if (!other.bundleImport_.isEmpty()) {
          if (bundleImport_.isEmpty()) {
            bundleImport_ = other.bundleImport_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureBundleImportIsMutable();
            bundleImport_.addAll(other.bundleImport_);
          }
          onChanged();
        }
        if (other.hasProductType()) {
          bitField0_ |= 0x00200000;
          productType_ = other.productType_;
          onChanged();
        }
        if (!other.sdkDylib_.isEmpty()) {
          if (sdkDylib_.isEmpty()) {
            sdkDylib_ = other.sdkDylib_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureSdkDylibIsMutable();
            sdkDylib_.addAll(other.sdkDylib_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * A short name for the target that need not be unique. For instance, for
       * binary targets this corresponds to the product name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * A short name for the target that need not be unique. For instance, for
       * binary targets this corresponds to the product name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A short name for the target that need not be unique. For instance, for
       * binary targets this corresponds to the product name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A short name for the target that need not be unique. For instance, for
       * binary targets this corresponds to the product name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A short name for the target that need not be unique. For instance, for
       * binary targets this corresponds to the product name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A short name for the target that need not be unique. For instance, for
       * binary targets this corresponds to the product name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSourceFileIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          sourceFile_ = new com.google.protobuf.LazyStringArrayList(sourceFile_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getSourceFileList() {
        return sourceFile_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public int getSourceFileCount() {
        return sourceFile_.size();
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public java.lang.String getSourceFile(int index) {
        return sourceFile_.get(index);
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceFileBytes(int index) {
        return sourceFile_.getByteString(index);
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public Builder setSourceFile(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourceFileIsMutable();
        sourceFile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public Builder addSourceFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourceFileIsMutable();
        sourceFile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public Builder addAllSourceFile(
          java.lang.Iterable<java.lang.String> values) {
        ensureSourceFileIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sourceFile_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public Builder clearSourceFile() {
        sourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to source files to compile. Each source file is added to
       * the sources build phase of the target, so any file accepted by Xcode is
       * valid.
       * </pre>
       *
       * <code>repeated string source_file = 2;</code>
       */
      public Builder addSourceFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSourceFileIsMutable();
        sourceFile_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList nonArcSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureNonArcSourceFileIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          nonArcSourceFile_ = new com.google.protobuf.LazyStringArrayList(nonArcSourceFile_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getNonArcSourceFileList() {
        return nonArcSourceFile_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public int getNonArcSourceFileCount() {
        return nonArcSourceFile_.size();
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public java.lang.String getNonArcSourceFile(int index) {
        return nonArcSourceFile_.get(index);
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public com.google.protobuf.ByteString
          getNonArcSourceFileBytes(int index) {
        return nonArcSourceFile_.getByteString(index);
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public Builder setNonArcSourceFile(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNonArcSourceFileIsMutable();
        nonArcSourceFile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public Builder addNonArcSourceFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNonArcSourceFileIsMutable();
        nonArcSourceFile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public Builder addAllNonArcSourceFile(
          java.lang.Iterable<java.lang.String> values) {
        ensureNonArcSourceFileIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nonArcSourceFile_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public Builder clearNonArcSourceFile() {
        nonArcSourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identical to source_file, but only Objective-C[++] source files are
       * valid. These sources are compiled without ARC.
       * </pre>
       *
       * <code>repeated string non_arc_source_file = 6;</code>
       */
      public Builder addNonArcSourceFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNonArcSourceFileIsMutable();
        nonArcSourceFile_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList supportFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSupportFileIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          supportFile_ = new com.google.protobuf.LazyStringArrayList(supportFile_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getSupportFileList() {
        return supportFile_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public int getSupportFileCount() {
        return supportFile_.size();
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public java.lang.String getSupportFile(int index) {
        return supportFile_.get(index);
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getSupportFileBytes(int index) {
        return supportFile_.getByteString(index);
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public Builder setSupportFile(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSupportFileIsMutable();
        supportFile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public Builder addSupportFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSupportFileIsMutable();
        supportFile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public Builder addAllSupportFile(
          java.lang.Iterable<java.lang.String> values) {
        ensureSupportFileIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, supportFile_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public Builder clearSupportFile() {
        supportFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Relative paths to support files, such as BUILD, header, and non-compiled
       * source files. These are included in the project so they can be opened in
       * the project explorer view, but are not compiled into object files.
       * </pre>
       *
       * <code>repeated string support_file = 3;</code>
       */
      public Builder addSupportFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSupportFileIsMutable();
        supportFile_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl> dependency_ =
        java.util.Collections.emptyList();
      private void ensureDependencyIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          dependency_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl>(dependency_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder> dependencyBuilder_;

      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl> getDependencyList() {
        if (dependencyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dependency_);
        } else {
          return dependencyBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public int getDependencyCount() {
        if (dependencyBuilder_ == null) {
          return dependency_.size();
        } else {
          return dependencyBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl getDependency(int index) {
        if (dependencyBuilder_ == null) {
          return dependency_.get(index);
        } else {
          return dependencyBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder setDependency(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl value) {
        if (dependencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependencyIsMutable();
          dependency_.set(index, value);
          onChanged();
        } else {
          dependencyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder setDependency(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder builderForValue) {
        if (dependencyBuilder_ == null) {
          ensureDependencyIsMutable();
          dependency_.set(index, builderForValue.build());
          onChanged();
        } else {
          dependencyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder addDependency(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl value) {
        if (dependencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependencyIsMutable();
          dependency_.add(value);
          onChanged();
        } else {
          dependencyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder addDependency(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl value) {
        if (dependencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependencyIsMutable();
          dependency_.add(index, value);
          onChanged();
        } else {
          dependencyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder addDependency(
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder builderForValue) {
        if (dependencyBuilder_ == null) {
          ensureDependencyIsMutable();
          dependency_.add(builderForValue.build());
          onChanged();
        } else {
          dependencyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder addDependency(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder builderForValue) {
        if (dependencyBuilder_ == null) {
          ensureDependencyIsMutable();
          dependency_.add(index, builderForValue.build());
          onChanged();
        } else {
          dependencyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder addAllDependency(
          java.lang.Iterable<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl> values) {
        if (dependencyBuilder_ == null) {
          ensureDependencyIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dependency_);
          onChanged();
        } else {
          dependencyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder clearDependency() {
        if (dependencyBuilder_ == null) {
          dependency_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          dependencyBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public Builder removeDependency(int index) {
        if (dependencyBuilder_ == null) {
          ensureDependencyIsMutable();
          dependency_.remove(index);
          onChanged();
        } else {
          dependencyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder getDependencyBuilder(
          int index) {
        return getDependencyFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder getDependencyOrBuilder(
          int index) {
        if (dependencyBuilder_ == null) {
          return dependency_.get(index);  } else {
          return dependencyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder> 
           getDependencyOrBuilderList() {
        if (dependencyBuilder_ != null) {
          return dependencyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dependency_);
        }
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder addDependencyBuilder() {
        return getDependencyFieldBuilder().addBuilder(
            com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.getDefaultInstance());
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder addDependencyBuilder(
          int index) {
        return getDependencyFieldBuilder().addBuilder(
            index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.getDefaultInstance());
      }
      /**
       * <pre>
       * Dependencies this target has on other targets.
       * </pre>
       *
       * <code>repeated .build.xcode.DependencyControl dependency = 4;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder> 
           getDependencyBuilderList() {
        return getDependencyFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder> 
          getDependencyFieldBuilder() {
        if (dependencyBuilder_ == null) {
          dependencyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControl.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.DependencyControlOrBuilder>(
                  dependency_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          dependency_ = null;
        }
        return dependencyBuilder_;
      }

      private java.lang.Object infoplist_ = "";
      /**
       * <pre>
       * (Used for objc_binary and objc_bundle_library targets) path to the
       * -Info.plist file for the application.
       * </pre>
       *
       * <code>optional string infoplist = 5;</code>
       */
      public boolean hasInfoplist() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * (Used for objc_binary and objc_bundle_library targets) path to the
       * -Info.plist file for the application.
       * </pre>
       *
       * <code>optional string infoplist = 5;</code>
       */
      public java.lang.String getInfoplist() {
        java.lang.Object ref = infoplist_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            infoplist_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * (Used for objc_binary and objc_bundle_library targets) path to the
       * -Info.plist file for the application.
       * </pre>
       *
       * <code>optional string infoplist = 5;</code>
       */
      public com.google.protobuf.ByteString
          getInfoplistBytes() {
        java.lang.Object ref = infoplist_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          infoplist_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * (Used for objc_binary and objc_bundle_library targets) path to the
       * -Info.plist file for the application.
       * </pre>
       *
       * <code>optional string infoplist = 5;</code>
       */
      public Builder setInfoplist(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        infoplist_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Used for objc_binary and objc_bundle_library targets) path to the
       * -Info.plist file for the application.
       * </pre>
       *
       * <code>optional string infoplist = 5;</code>
       */
      public Builder clearInfoplist() {
        bitField0_ = (bitField0_ & ~0x00000020);
        infoplist_ = getDefaultInstance().getInfoplist();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Used for objc_binary and objc_bundle_library targets) path to the
       * -Info.plist file for the application.
       * </pre>
       *
       * <code>optional string infoplist = 5;</code>
       */
      public Builder setInfoplistBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        infoplist_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object label_ = "";
      /**
       * <pre>
       * A unique name for the target in the project. This is similar to the name
       * field, but is globally unique and may be long.
       * </pre>
       *
       * <code>optional string label = 7;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * A unique name for the target in the project. This is similar to the name
       * field, but is globally unique and may be long.
       * </pre>
       *
       * <code>optional string label = 7;</code>
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            label_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A unique name for the target in the project. This is similar to the name
       * field, but is globally unique and may be long.
       * </pre>
       *
       * <code>optional string label = 7;</code>
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A unique name for the target in the project. This is similar to the name
       * field, but is globally unique and may be long.
       * </pre>
       *
       * <code>optional string label = 7;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique name for the target in the project. This is similar to the name
       * field, but is globally unique and may be long.
       * </pre>
       *
       * <code>optional string label = 7;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000040);
        label_ = getDefaultInstance().getLabel();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique name for the target in the project. This is similar to the name
       * field, but is globally unique and may be long.
       * </pre>
       *
       * <code>optional string label = 7;</code>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        label_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList copt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCoptIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          copt_ = new com.google.protobuf.LazyStringArrayList(copt_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCoptList() {
        return copt_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public int getCoptCount() {
        return copt_.size();
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public java.lang.String getCopt(int index) {
        return copt_.get(index);
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public com.google.protobuf.ByteString
          getCoptBytes(int index) {
        return copt_.getByteString(index);
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public Builder setCopt(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCoptIsMutable();
        copt_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public Builder addCopt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCoptIsMutable();
        copt_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public Builder addAllCopt(
          java.lang.Iterable<java.lang.String> values) {
        ensureCoptIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, copt_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public Builder clearCopt() {
        copt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the [objective] c[++] compiler.
       * </pre>
       *
       * <code>repeated string copt = 8;</code>
       */
      public Builder addCoptBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCoptIsMutable();
        copt_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList linkopt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureLinkoptIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          linkopt_ = new com.google.protobuf.LazyStringArrayList(linkopt_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getLinkoptList() {
        return linkopt_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public int getLinkoptCount() {
        return linkopt_.size();
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public java.lang.String getLinkopt(int index) {
        return linkopt_.get(index);
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public com.google.protobuf.ByteString
          getLinkoptBytes(int index) {
        return linkopt_.getByteString(index);
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public Builder setLinkopt(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLinkoptIsMutable();
        linkopt_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public Builder addLinkopt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLinkoptIsMutable();
        linkopt_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public Builder addAllLinkopt(
          java.lang.Iterable<java.lang.String> values) {
        ensureLinkoptIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, linkopt_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public Builder clearLinkopt() {
        linkopt_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional flags to pass to the linker.
       * </pre>
       *
       * <code>repeated string linkopt = 22;</code>
       */
      public Builder addLinkoptBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLinkoptIsMutable();
        linkopt_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList xcassetsDir_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureXcassetsDirIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          xcassetsDir_ = new com.google.protobuf.LazyStringArrayList(xcassetsDir_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getXcassetsDirList() {
        return xcassetsDir_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public int getXcassetsDirCount() {
        return xcassetsDir_.size();
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public java.lang.String getXcassetsDir(int index) {
        return xcassetsDir_.get(index);
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public com.google.protobuf.ByteString
          getXcassetsDirBytes(int index) {
        return xcassetsDir_.getByteString(index);
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public Builder setXcassetsDir(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureXcassetsDirIsMutable();
        xcassetsDir_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public Builder addXcassetsDir(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureXcassetsDirIsMutable();
        xcassetsDir_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public Builder addAllXcassetsDir(
          java.lang.Iterable<java.lang.String> values) {
        ensureXcassetsDirIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, xcassetsDir_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public Builder clearXcassetsDir() {
        xcassetsDir_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to *.xcassets directories to include in the target as asset
       * catalogs. For all targets, this causes the .xcassets directory to be
       * included in the Project Navigator. For targets that can include them (e.g.
       * objc_binary), this causes them to be included in the resources build
       * phase.
       * </pre>
       *
       * <code>repeated string xcassets_dir = 9;</code>
       */
      public Builder addXcassetsDirBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureXcassetsDirIsMutable();
        xcassetsDir_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> buildSetting_ =
        java.util.Collections.emptyList();
      private void ensureBuildSettingIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          buildSetting_ = new java.util.ArrayList<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting>(buildSetting_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> buildSettingBuilder_;

      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> getBuildSettingList() {
        if (buildSettingBuilder_ == null) {
          return java.util.Collections.unmodifiableList(buildSetting_);
        } else {
          return buildSettingBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public int getBuildSettingCount() {
        if (buildSettingBuilder_ == null) {
          return buildSetting_.size();
        } else {
          return buildSettingBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getBuildSetting(int index) {
        if (buildSettingBuilder_ == null) {
          return buildSetting_.get(index);
        } else {
          return buildSettingBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder setBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting value) {
        if (buildSettingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuildSettingIsMutable();
          buildSetting_.set(index, value);
          onChanged();
        } else {
          buildSettingBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder setBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder builderForValue) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.set(index, builderForValue.build());
          onChanged();
        } else {
          buildSettingBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder addBuildSetting(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting value) {
        if (buildSettingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuildSettingIsMutable();
          buildSetting_.add(value);
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder addBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting value) {
        if (buildSettingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBuildSettingIsMutable();
          buildSetting_.add(index, value);
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder addBuildSetting(
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder builderForValue) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.add(builderForValue.build());
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder addBuildSetting(
          int index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder builderForValue) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.add(index, builderForValue.build());
          onChanged();
        } else {
          buildSettingBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder addAllBuildSetting(
          java.lang.Iterable<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting> values) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, buildSetting_);
          onChanged();
        } else {
          buildSettingBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder clearBuildSetting() {
        if (buildSettingBuilder_ == null) {
          buildSetting_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          buildSettingBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public Builder removeBuildSetting(int index) {
        if (buildSettingBuilder_ == null) {
          ensureBuildSettingIsMutable();
          buildSetting_.remove(index);
          onChanged();
        } else {
          buildSettingBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder getBuildSettingBuilder(
          int index) {
        return getBuildSettingFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder getBuildSettingOrBuilder(
          int index) {
        if (buildSettingBuilder_ == null) {
          return buildSetting_.get(index);  } else {
          return buildSettingBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public java.util.List<? extends com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
           getBuildSettingOrBuilderList() {
        if (buildSettingBuilder_ != null) {
          return buildSettingBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(buildSetting_);
        }
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder addBuildSettingBuilder() {
        return getBuildSettingFieldBuilder().addBuilder(
            com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.getDefaultInstance());
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder addBuildSettingBuilder(
          int index) {
        return getBuildSettingFieldBuilder().addBuilder(
            index, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.getDefaultInstance());
      }
      /**
       * <pre>
       * Miscellaneous build settings. Each setting is applied to all build
       * configurations.
       * </pre>
       *
       * <code>repeated .build.xcode.XcodeprojBuildSetting build_setting = 10;</code>
       */
      public java.util.List<com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder> 
           getBuildSettingBuilderList() {
        return getBuildSettingFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder> 
          getBuildSettingFieldBuilder() {
        if (buildSettingBuilder_ == null) {
          buildSettingBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder>(
                  buildSetting_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          buildSetting_ = null;
        }
        return buildSettingBuilder_;
      }

      private com.google.protobuf.LazyStringList generalResourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureGeneralResourceFileIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          generalResourceFile_ = new com.google.protobuf.LazyStringArrayList(generalResourceFile_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getGeneralResourceFileList() {
        return generalResourceFile_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public int getGeneralResourceFileCount() {
        return generalResourceFile_.size();
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public java.lang.String getGeneralResourceFile(int index) {
        return generalResourceFile_.get(index);
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public com.google.protobuf.ByteString
          getGeneralResourceFileBytes(int index) {
        return generalResourceFile_.getByteString(index);
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public Builder setGeneralResourceFile(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralResourceFileIsMutable();
        generalResourceFile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public Builder addGeneralResourceFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralResourceFileIsMutable();
        generalResourceFile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public Builder addAllGeneralResourceFile(
          java.lang.Iterable<java.lang.String> values) {
        ensureGeneralResourceFileIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, generalResourceFile_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public Builder clearGeneralResourceFile() {
        generalResourceFile_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to strings or xib files. Xcodegen will determine automatically if
       * they are localized (i.e. are in a directory named *.lproj) or not.
       * TODO(bazel-team): Introduce a more powerful resource file protobuf, a
       * list of which can be used to specify all resources.
       * </pre>
       *
       * <code>repeated string general_resource_file = 11;</code>
       */
      public Builder addGeneralResourceFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralResourceFileIsMutable();
        generalResourceFile_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList sdkFramework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSdkFrameworkIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          sdkFramework_ = new com.google.protobuf.LazyStringArrayList(sdkFramework_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getSdkFrameworkList() {
        return sdkFramework_.getUnmodifiableView();
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public int getSdkFrameworkCount() {
        return sdkFramework_.size();
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public java.lang.String getSdkFramework(int index) {
        return sdkFramework_.get(index);
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public com.google.protobuf.ByteString
          getSdkFrameworkBytes(int index) {
        return sdkFramework_.getByteString(index);
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public Builder setSdkFramework(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSdkFrameworkIsMutable();
        sdkFramework_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public Builder addSdkFramework(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSdkFrameworkIsMutable();
        sdkFramework_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public Builder addAllSdkFramework(
          java.lang.Iterable<java.lang.String> values) {
        ensureSdkFrameworkIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sdkFramework_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public Builder clearSdkFramework() {
        sdkFramework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK frameworks to link with this target. This should be every framework
       * required by the targets in the transitive dependency tree. Xcodegen does
       * not find these transitive dependencies automatically; they must be added
       * to this repeated field.
       * </pre>
       *
       * <code>repeated string sdk_framework = 12;</code>
       */
      public Builder addSdkFrameworkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSdkFrameworkIsMutable();
        sdkFramework_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList framework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureFrameworkIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          framework_ = new com.google.protobuf.LazyStringArrayList(framework_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getFrameworkList() {
        return framework_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public int getFrameworkCount() {
        return framework_.size();
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public java.lang.String getFramework(int index) {
        return framework_.get(index);
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public com.google.protobuf.ByteString
          getFrameworkBytes(int index) {
        return framework_.getByteString(index);
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public Builder setFramework(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFrameworkIsMutable();
        framework_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public Builder addFramework(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFrameworkIsMutable();
        framework_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public Builder addAllFramework(
          java.lang.Iterable<java.lang.String> values) {
        ensureFrameworkIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, framework_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public Builder clearFramework() {
        framework_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks to link with this target, relative to the
       * same path as every other path in the control file. This should be every
       * framework required by the targets in the transitive dependency tree.
       * </pre>
       *
       * <code>repeated string framework = 21;</code>
       */
      public Builder addFrameworkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFrameworkIsMutable();
        framework_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList frameworkSearchPathOnly_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureFrameworkSearchPathOnlyIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          frameworkSearchPathOnly_ = new com.google.protobuf.LazyStringArrayList(frameworkSearchPathOnly_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getFrameworkSearchPathOnlyList() {
        return frameworkSearchPathOnly_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public int getFrameworkSearchPathOnlyCount() {
        return frameworkSearchPathOnly_.size();
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public java.lang.String getFrameworkSearchPathOnly(int index) {
        return frameworkSearchPathOnly_.get(index);
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public com.google.protobuf.ByteString
          getFrameworkSearchPathOnlyBytes(int index) {
        return frameworkSearchPathOnly_.getByteString(index);
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public Builder setFrameworkSearchPathOnly(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFrameworkSearchPathOnlyIsMutable();
        frameworkSearchPathOnly_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public Builder addFrameworkSearchPathOnly(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFrameworkSearchPathOnlyIsMutable();
        frameworkSearchPathOnly_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public Builder addAllFrameworkSearchPathOnly(
          java.lang.Iterable<java.lang.String> values) {
        ensureFrameworkSearchPathOnlyIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, frameworkSearchPathOnly_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public Builder clearFrameworkSearchPathOnly() {
        frameworkSearchPathOnly_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Paths to non-SDK frameworks relative to the same path as every other path
       * in the control file.  These frameworks will be added to framework search
       * paths for the target (with -F) but will not actually be linked (that is,
       * there will be no -framework).
       * </pre>
       *
       * <code>repeated string framework_search_path_only = 23;</code>
       */
      public Builder addFrameworkSearchPathOnlyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureFrameworkSearchPathOnlyIsMutable();
        frameworkSearchPathOnly_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList xcdatamodel_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureXcdatamodelIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          xcdatamodel_ = new com.google.protobuf.LazyStringArrayList(xcdatamodel_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getXcdatamodelList() {
        return xcdatamodel_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public int getXcdatamodelCount() {
        return xcdatamodel_.size();
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public java.lang.String getXcdatamodel(int index) {
        return xcdatamodel_.get(index);
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public com.google.protobuf.ByteString
          getXcdatamodelBytes(int index) {
        return xcdatamodel_.getByteString(index);
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public Builder setXcdatamodel(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureXcdatamodelIsMutable();
        xcdatamodel_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public Builder addXcdatamodel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureXcdatamodelIsMutable();
        xcdatamodel_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public Builder addAllXcdatamodel(
          java.lang.Iterable<java.lang.String> values) {
        ensureXcdatamodelIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, xcdatamodel_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public Builder clearXcdatamodel() {
        xcdatamodel_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .xcdatamodel directories required. All directories inside
       * a .xcdatamodeld directory are grouped into XCVersionGroups by the path of
       * the .xcdatamodeld directory.
       * </pre>
       *
       * <code>repeated string xcdatamodel = 13;</code>
       */
      public Builder addXcdatamodelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureXcdatamodelIsMutable();
        xcdatamodel_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList importedLibrary_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureImportedLibraryIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          importedLibrary_ = new com.google.protobuf.LazyStringArrayList(importedLibrary_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getImportedLibraryList() {
        return importedLibrary_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public int getImportedLibraryCount() {
        return importedLibrary_.size();
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public java.lang.String getImportedLibrary(int index) {
        return importedLibrary_.get(index);
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public com.google.protobuf.ByteString
          getImportedLibraryBytes(int index) {
        return importedLibrary_.getByteString(index);
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public Builder setImportedLibrary(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedLibraryIsMutable();
        importedLibrary_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public Builder addImportedLibrary(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedLibraryIsMutable();
        importedLibrary_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public Builder addAllImportedLibrary(
          java.lang.Iterable<java.lang.String> values) {
        ensureImportedLibraryIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, importedLibrary_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public Builder clearImportedLibrary() {
        importedLibrary_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to all .a libraries to link with this target. When used on static
       * library targets, the library is not actually linked, but it will appear
       * in the Xcode Project Navigator. These are considered to be pre-built
       * libraries. In other words, they are NOT built by Xcode as a dependency
       * before this target is built.
       * </pre>
       *
       * <code>repeated string imported_library = 14;</code>
       */
      public Builder addImportedLibraryBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedLibraryIsMutable();
        importedLibrary_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList userHeaderSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureUserHeaderSearchPathIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          userHeaderSearchPath_ = new com.google.protobuf.LazyStringArrayList(userHeaderSearchPath_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getUserHeaderSearchPathList() {
        return userHeaderSearchPath_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public int getUserHeaderSearchPathCount() {
        return userHeaderSearchPath_.size();
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public java.lang.String getUserHeaderSearchPath(int index) {
        return userHeaderSearchPath_.get(index);
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public com.google.protobuf.ByteString
          getUserHeaderSearchPathBytes(int index) {
        return userHeaderSearchPath_.getByteString(index);
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public Builder setUserHeaderSearchPath(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUserHeaderSearchPathIsMutable();
        userHeaderSearchPath_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public Builder addUserHeaderSearchPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUserHeaderSearchPathIsMutable();
        userHeaderSearchPath_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public Builder addAllUserHeaderSearchPath(
          java.lang.Iterable<java.lang.String> values) {
        ensureUserHeaderSearchPathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, userHeaderSearchPath_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public Builder clearUserHeaderSearchPath() {
        userHeaderSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as user header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-iquote" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string user_header_search_path = 15;</code>
       */
      public Builder addUserHeaderSearchPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUserHeaderSearchPathIsMutable();
        userHeaderSearchPath_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList headerSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureHeaderSearchPathIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          headerSearchPath_ = new com.google.protobuf.LazyStringArrayList(headerSearchPath_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getHeaderSearchPathList() {
        return headerSearchPath_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public int getHeaderSearchPathCount() {
        return headerSearchPath_.size();
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public java.lang.String getHeaderSearchPath(int index) {
        return headerSearchPath_.get(index);
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public com.google.protobuf.ByteString
          getHeaderSearchPathBytes(int index) {
        return headerSearchPath_.getByteString(index);
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public Builder setHeaderSearchPath(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureHeaderSearchPathIsMutable();
        headerSearchPath_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public Builder addHeaderSearchPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureHeaderSearchPathIsMutable();
        headerSearchPath_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public Builder addAllHeaderSearchPath(
          java.lang.Iterable<java.lang.String> values) {
        ensureHeaderSearchPathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, headerSearchPath_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public Builder clearHeaderSearchPath() {
        headerSearchPath_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to directories to include as header search paths. These are non-
       * recursive. These should be specified here rather than in the build_setting
       * field because the build_setting field requires paths to be specified
       * relative to the container of the .xcodeproj directory, while this
       * attribute is relative to the same path as every other path in the control
       * file. These paths correspond to the "-I" arguments passed to the
       * compiler.
       * </pre>
       *
       * <code>repeated string header_search_path = 16;</code>
       */
      public Builder addHeaderSearchPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureHeaderSearchPathIsMutable();
        headerSearchPath_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object pchPath_ = "";
      /**
       * <pre>
       * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
       * build_setting field because the build_setting field requires paths to be
       * specified relative to the container of the .xcodeproj directory, while
       * this attribute is relative to the same path as every other path in the
       * control file.
       * </pre>
       *
       * <code>optional string pch_path = 20;</code>
       */
      public boolean hasPchPath() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <pre>
       * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
       * build_setting field because the build_setting field requires paths to be
       * specified relative to the container of the .xcodeproj directory, while
       * this attribute is relative to the same path as every other path in the
       * control file.
       * </pre>
       *
       * <code>optional string pch_path = 20;</code>
       */
      public java.lang.String getPchPath() {
        java.lang.Object ref = pchPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            pchPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
       * build_setting field because the build_setting field requires paths to be
       * specified relative to the container of the .xcodeproj directory, while
       * this attribute is relative to the same path as every other path in the
       * control file.
       * </pre>
       *
       * <code>optional string pch_path = 20;</code>
       */
      public com.google.protobuf.ByteString
          getPchPathBytes() {
        java.lang.Object ref = pchPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pchPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
       * build_setting field because the build_setting field requires paths to be
       * specified relative to the container of the .xcodeproj directory, while
       * this attribute is relative to the same path as every other path in the
       * control file.
       * </pre>
       *
       * <code>optional string pch_path = 20;</code>
       */
      public Builder setPchPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00080000;
        pchPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
       * build_setting field because the build_setting field requires paths to be
       * specified relative to the container of the .xcodeproj directory, while
       * this attribute is relative to the same path as every other path in the
       * control file.
       * </pre>
       *
       * <code>optional string pch_path = 20;</code>
       */
      public Builder clearPchPath() {
        bitField0_ = (bitField0_ & ~0x00080000);
        pchPath_ = getDefaultInstance().getPchPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * GCC_PREFIX_HEADER path. Needs to be be specified here rather than in the
       * build_setting field because the build_setting field requires paths to be
       * specified relative to the container of the .xcodeproj directory, while
       * this attribute is relative to the same path as every other path in the
       * control file.
       * </pre>
       *
       * <code>optional string pch_path = 20;</code>
       */
      public Builder setPchPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00080000;
        pchPath_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList bundleImport_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBundleImportIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          bundleImport_ = new com.google.protobuf.LazyStringArrayList(bundleImport_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getBundleImportList() {
        return bundleImport_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public int getBundleImportCount() {
        return bundleImport_.size();
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public java.lang.String getBundleImport(int index) {
        return bundleImport_.get(index);
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public com.google.protobuf.ByteString
          getBundleImportBytes(int index) {
        return bundleImport_.getByteString(index);
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public Builder setBundleImport(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBundleImportIsMutable();
        bundleImport_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public Builder addBundleImport(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBundleImportIsMutable();
        bundleImport_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public Builder addAllBundleImport(
          java.lang.Iterable<java.lang.String> values) {
        ensureBundleImportIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bundleImport_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public Builder clearBundleImport() {
        bundleImport_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to .bundle directories this target depends on. For static library
       * targets, this only causes the bundle to appear in the Project Navigator.
       * For application target, this also causes the bundle to be linked with the
       * application.
       * </pre>
       *
       * <code>repeated string bundle_import = 17;</code>
       */
      public Builder addBundleImportBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBundleImportIsMutable();
        bundleImport_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object productType_ = "";
      /**
       * <pre>
       * The product type, for instance "com.apple.product-type.bundle". If
       * omitted, the presence of the infoplist field indicates the type:
       * has infoplist: "com.apple.product-type.application"
       * does not have infoplist: "com.apple.product-type.library.static"
       * </pre>
       *
       * <code>optional string product_type = 18;</code>
       */
      public boolean hasProductType() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <pre>
       * The product type, for instance "com.apple.product-type.bundle". If
       * omitted, the presence of the infoplist field indicates the type:
       * has infoplist: "com.apple.product-type.application"
       * does not have infoplist: "com.apple.product-type.library.static"
       * </pre>
       *
       * <code>optional string product_type = 18;</code>
       */
      public java.lang.String getProductType() {
        java.lang.Object ref = productType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            productType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The product type, for instance "com.apple.product-type.bundle". If
       * omitted, the presence of the infoplist field indicates the type:
       * has infoplist: "com.apple.product-type.application"
       * does not have infoplist: "com.apple.product-type.library.static"
       * </pre>
       *
       * <code>optional string product_type = 18;</code>
       */
      public com.google.protobuf.ByteString
          getProductTypeBytes() {
        java.lang.Object ref = productType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          productType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The product type, for instance "com.apple.product-type.bundle". If
       * omitted, the presence of the infoplist field indicates the type:
       * has infoplist: "com.apple.product-type.application"
       * does not have infoplist: "com.apple.product-type.library.static"
       * </pre>
       *
       * <code>optional string product_type = 18;</code>
       */
      public Builder setProductType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00200000;
        productType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The product type, for instance "com.apple.product-type.bundle". If
       * omitted, the presence of the infoplist field indicates the type:
       * has infoplist: "com.apple.product-type.application"
       * does not have infoplist: "com.apple.product-type.library.static"
       * </pre>
       *
       * <code>optional string product_type = 18;</code>
       */
      public Builder clearProductType() {
        bitField0_ = (bitField0_ & ~0x00200000);
        productType_ = getDefaultInstance().getProductType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The product type, for instance "com.apple.product-type.bundle". If
       * omitted, the presence of the infoplist field indicates the type:
       * has infoplist: "com.apple.product-type.application"
       * does not have infoplist: "com.apple.product-type.library.static"
       * </pre>
       *
       * <code>optional string product_type = 18;</code>
       */
      public Builder setProductTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00200000;
        productType_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList sdkDylib_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSdkDylibIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          sdkDylib_ = new com.google.protobuf.LazyStringArrayList(sdkDylib_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getSdkDylibList() {
        return sdkDylib_.getUnmodifiableView();
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public int getSdkDylibCount() {
        return sdkDylib_.size();
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public java.lang.String getSdkDylib(int index) {
        return sdkDylib_.get(index);
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public com.google.protobuf.ByteString
          getSdkDylibBytes(int index) {
        return sdkDylib_.getByteString(index);
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public Builder setSdkDylib(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSdkDylibIsMutable();
        sdkDylib_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public Builder addSdkDylib(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSdkDylibIsMutable();
        sdkDylib_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public Builder addAllSdkDylib(
          java.lang.Iterable<java.lang.String> values) {
        ensureSdkDylibIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sdkDylib_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public Builder clearSdkDylib() {
        sdkDylib_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * SDK .dylib files to link with this target. Each name should not include the
       * the path or the .dylib extension, e.g. "libz" to link in
       * "SDKROOT/usr/lib/libz.dylib". For all targets, this causes the library to
       * appear in the Project Build Settings under OTHER_LDFLAGS. For binary
       * targets, this causes the library to be linked with the final binary.
       * </pre>
       *
       * <code>repeated string sdk_dylib = 19;</code>
       */
      public Builder addSdkDylibBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSdkDylibIsMutable();
        sdkDylib_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:build.xcode.TargetControl)
    }

    // @@protoc_insertion_point(class_scope:build.xcode.TargetControl)
    private static final com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl();
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TargetControl>
        PARSER = new com.google.protobuf.AbstractParser<TargetControl>() {
      public TargetControl parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TargetControl(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TargetControl> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TargetControl> getParserForType() {
      return PARSER;
    }

    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.TargetControl getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XcodeprojBuildSettingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:build.xcode.XcodeprojBuildSetting)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>optional string value = 2;</code>
     */
    java.lang.String getValue();
    /**
     * <code>optional string value = 2;</code>
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * Represents the mapping of a build setting recognized by Xcode project files,
   * for instance ASSETCATALOG_COMPILER_APPICON_NAME.
   * </pre>
   *
   * Protobuf type {@code build.xcode.XcodeprojBuildSetting}
   */
  public  static final class XcodeprojBuildSetting extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:build.xcode.XcodeprojBuildSetting)
      XcodeprojBuildSettingOrBuilder {
    // Use XcodeprojBuildSetting.newBuilder() to construct.
    private XcodeprojBuildSetting(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XcodeprojBuildSetting() {
      name_ = "";
      value_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private XcodeprojBuildSetting(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              value_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_XcodeprojBuildSetting_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_XcodeprojBuildSetting_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <code>optional string value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string value = 2;</code>
     */
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string value = 2;</code>
     */
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting)) {
        return super.equals(obj);
      }
      com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting other = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasValue() == other.hasValue());
      if (hasValue()) {
        result = result && getValue()
            .equals(other.getValue());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents the mapping of a build setting recognized by Xcode project files,
     * for instance ASSETCATALOG_COMPILER_APPICON_NAME.
     * </pre>
     *
     * Protobuf type {@code build.xcode.XcodeprojBuildSetting}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:build.xcode.XcodeprojBuildSetting)
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSettingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_XcodeprojBuildSetting_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_XcodeprojBuildSetting_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.class, com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.Builder.class);
      }

      // Construct using com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.internal_static_build_xcode_XcodeprojBuildSetting_descriptor;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getDefaultInstanceForType() {
        return com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.getDefaultInstance();
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting build() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting buildPartial() {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting result = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting) {
          return mergeFrom((com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting other) {
        if (other == com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasValue()) {
          bitField0_ |= 0x00000002;
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <code>optional string value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string value = 2;</code>
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            value_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string value = 2;</code>
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string value = 2;</code>
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string value = 2;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <code>optional string value = 2;</code>
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:build.xcode.XcodeprojBuildSetting)
    }

    // @@protoc_insertion_point(class_scope:build.xcode.XcodeprojBuildSetting)
    private static final com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting();
    }

    public static com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<XcodeprojBuildSetting>
        PARSER = new com.google.protobuf.AbstractParser<XcodeprojBuildSetting>() {
      public XcodeprojBuildSetting parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new XcodeprojBuildSetting(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<XcodeprojBuildSetting> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XcodeprojBuildSetting> getParserForType() {
      return PARSER;
    }

    public com.google.devtools.build.xcode.xcodegen.proto.XcodeGenProtos.XcodeprojBuildSetting getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_build_xcode_Control_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_build_xcode_Control_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_build_xcode_DependencyControl_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_build_xcode_DependencyControl_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_build_xcode_TargetControl_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_build_xcode_TargetControl_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_build_xcode_XcodeprojBuildSetting_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_build_xcode_XcodeprojBuildSetting_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\npbazel-out/local-fastbuild/bin/src/main" +
      "/protobuf/libxcodegen_java_proto_srcjar." +
      "srcjar.preprocessed/xcodegen.proto\022\013buil" +
      "d.xcode\"\263\001\n\007Control\022\017\n\007pbxproj\030\001 \001(\t\022*\n\006" +
      "target\030\002 \003(\0132\032.build.xcode.TargetControl" +
      "\0229\n\rbuild_setting\030\003 \003(\0132\".build.xcode.Xc" +
      "odeprojBuildSetting\022\026\n\016workspace_root\030\004 " +
      "\001(\t\022\030\n\020cpu_architecture\030\005 \003(\t\"<\n\021Depende" +
      "ncyControl\022\024\n\014target_label\030\001 \001(\t\022\021\n\ttest" +
      "_host\030\002 \001(\010\"\326\004\n\rTargetControl\022\014\n\004name\030\001 ",
      "\001(\t\022\023\n\013source_file\030\002 \003(\t\022\033\n\023non_arc_sour" +
      "ce_file\030\006 \003(\t\022\024\n\014support_file\030\003 \003(\t\0222\n\nd" +
      "ependency\030\004 \003(\0132\036.build.xcode.Dependency" +
      "Control\022\021\n\tinfoplist\030\005 \001(\t\022\r\n\005label\030\007 \001(" +
      "\t\022\014\n\004copt\030\010 \003(\t\022\017\n\007linkopt\030\026 \003(\t\022\024\n\014xcas" +
      "sets_dir\030\t \003(\t\0229\n\rbuild_setting\030\n \003(\0132\"." +
      "build.xcode.XcodeprojBuildSetting\022\035\n\025gen" +
      "eral_resource_file\030\013 \003(\t\022\025\n\rsdk_framewor" +
      "k\030\014 \003(\t\022\021\n\tframework\030\025 \003(\t\022\"\n\032framework_" +
      "search_path_only\030\027 \003(\t\022\023\n\013xcdatamodel\030\r ",
      "\003(\t\022\030\n\020imported_library\030\016 \003(\t\022\037\n\027user_he" +
      "ader_search_path\030\017 \003(\t\022\032\n\022header_search_" +
      "path\030\020 \003(\t\022\020\n\010pch_path\030\024 \001(\t\022\025\n\rbundle_i" +
      "mport\030\021 \003(\t\022\024\n\014product_type\030\022 \001(\t\022\021\n\tsdk" +
      "_dylib\030\023 \003(\t\"4\n\025XcodeprojBuildSetting\022\014\n" +
      "\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\tB@\n.com.google" +
      ".devtools.build.xcode.xcodegen.protoB\016Xc" +
      "odeGenProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_build_xcode_Control_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_build_xcode_Control_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_build_xcode_Control_descriptor,
        new java.lang.String[] { "Pbxproj", "Target", "BuildSetting", "WorkspaceRoot", "CpuArchitecture", });
    internal_static_build_xcode_DependencyControl_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_build_xcode_DependencyControl_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_build_xcode_DependencyControl_descriptor,
        new java.lang.String[] { "TargetLabel", "TestHost", });
    internal_static_build_xcode_TargetControl_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_build_xcode_TargetControl_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_build_xcode_TargetControl_descriptor,
        new java.lang.String[] { "Name", "SourceFile", "NonArcSourceFile", "SupportFile", "Dependency", "Infoplist", "Label", "Copt", "Linkopt", "XcassetsDir", "BuildSetting", "GeneralResourceFile", "SdkFramework", "Framework", "FrameworkSearchPathOnly", "Xcdatamodel", "ImportedLibrary", "UserHeaderSearchPath", "HeaderSearchPath", "PchPath", "BundleImport", "ProductType", "SdkDylib", });
    internal_static_build_xcode_XcodeprojBuildSetting_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_build_xcode_XcodeprojBuildSetting_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_build_xcode_XcodeprojBuildSetting_descriptor,
        new java.lang.String[] { "Name", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
